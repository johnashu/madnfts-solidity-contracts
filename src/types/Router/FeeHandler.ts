/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface FeeHandlerInterface extends utils.Interface {
  functions: {
    "feeBurn()": FunctionFragment;
    "feeBurnErc20(address)": FunctionFragment;
    "feeMint()": FunctionFragment;
    "feeMintErc20(address)": FunctionFragment;
    "maxFeeBurn()": FunctionFragment;
    "maxFeeMint()": FunctionFragment;
    "recipient()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "feeBurn"
      | "feeBurnErc20"
      | "feeMint"
      | "feeMintErc20"
      | "maxFeeBurn"
      | "maxFeeMint"
      | "recipient"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "feeBurn", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeBurnErc20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "feeMint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeMintErc20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFeeBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFeeMint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "recipient", values?: undefined): string;

  decodeFunctionResult(functionFragment: "feeBurn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeBurnErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeMintErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxFeeBurn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxFeeMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipient", data: BytesLike): Result;

  events: {};
}

export interface FeeHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FeeHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    feeBurn(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeBurnErc20(
      erc20token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { burnPrice: BigNumber }>;

    feeMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeMintErc20(
      erc20token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { mintPrice: BigNumber }>;

    maxFeeBurn(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxFeeMint(overrides?: CallOverrides): Promise<[BigNumber]>;

    recipient(overrides?: CallOverrides): Promise<[string]>;
  };

  feeBurn(overrides?: CallOverrides): Promise<BigNumber>;

  feeBurnErc20(
    erc20token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  feeMint(overrides?: CallOverrides): Promise<BigNumber>;

  feeMintErc20(
    erc20token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  maxFeeBurn(overrides?: CallOverrides): Promise<BigNumber>;

  maxFeeMint(overrides?: CallOverrides): Promise<BigNumber>;

  recipient(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    feeBurn(overrides?: CallOverrides): Promise<BigNumber>;

    feeBurnErc20(
      erc20token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeMint(overrides?: CallOverrides): Promise<BigNumber>;

    feeMintErc20(
      erc20token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxFeeBurn(overrides?: CallOverrides): Promise<BigNumber>;

    maxFeeMint(overrides?: CallOverrides): Promise<BigNumber>;

    recipient(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    feeBurn(overrides?: CallOverrides): Promise<BigNumber>;

    feeBurnErc20(
      erc20token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeMint(overrides?: CallOverrides): Promise<BigNumber>;

    feeMintErc20(
      erc20token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxFeeBurn(overrides?: CallOverrides): Promise<BigNumber>;

    maxFeeMint(overrides?: CallOverrides): Promise<BigNumber>;

    recipient(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    feeBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeBurnErc20(
      erc20token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeMintErc20(
      erc20token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxFeeBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFeeMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
