/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MarketplaceEventsAndErrors721Interface
  extends utils.Interface {
  functions: {};

  events: {
    "AuctionSettingsUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "Bid(address,uint256,bytes32,address,uint256)": EventFragment;
    "CancelOrder(address,uint256,bytes32,address)": EventFragment;
    "Claim(address,uint256,bytes32,address,address,uint256)": EventFragment;
    "FactoryUpdated(address)": EventFragment;
    "FeesUpdated(uint256,uint256)": EventFragment;
    "MakeOrder(address,uint256,bytes32,address)": EventFragment;
    "PaymentTokenUpdated(address)": EventFragment;
    "RecipientUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionSettingsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactoryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakeOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecipientUpdated"): EventFragment;
}

export interface AuctionSettingsUpdatedEventObject {
  newMinDuration: BigNumber;
  newIncrement: BigNumber;
  newMinBidValue: BigNumber;
  newMaxDuration: BigNumber;
}
export type AuctionSettingsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AuctionSettingsUpdatedEventObject
>;

export type AuctionSettingsUpdatedEventFilter =
  TypedEventFilter<AuctionSettingsUpdatedEvent>;

export interface BidEventObject {
  token: string;
  id: BigNumber;
  hash: string;
  bidder: string;
  bidPrice: BigNumber;
}
export type BidEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  BidEventObject
>;

export type BidEventFilter = TypedEventFilter<BidEvent>;

export interface CancelOrderEventObject {
  token: string;
  id: BigNumber;
  hash: string;
  seller: string;
}
export type CancelOrderEvent = TypedEvent<
  [string, BigNumber, string, string],
  CancelOrderEventObject
>;

export type CancelOrderEventFilter = TypedEventFilter<CancelOrderEvent>;

export interface ClaimEventObject {
  token: string;
  id: BigNumber;
  hash: string;
  seller: string;
  taker: string;
  price: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, BigNumber, string, string, string, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface FactoryUpdatedEventObject {
  newFactory: string;
}
export type FactoryUpdatedEvent = TypedEvent<
  [string],
  FactoryUpdatedEventObject
>;

export type FactoryUpdatedEventFilter = TypedEventFilter<FactoryUpdatedEvent>;

export interface FeesUpdatedEventObject {
  feeVal2: BigNumber;
  feeVal3: BigNumber;
}
export type FeesUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FeesUpdatedEventObject
>;

export type FeesUpdatedEventFilter = TypedEventFilter<FeesUpdatedEvent>;

export interface MakeOrderEventObject {
  token: string;
  id: BigNumber;
  hash: string;
  seller: string;
}
export type MakeOrderEvent = TypedEvent<
  [string, BigNumber, string, string],
  MakeOrderEventObject
>;

export type MakeOrderEventFilter = TypedEventFilter<MakeOrderEvent>;

export interface PaymentTokenUpdatedEventObject {
  newPaymentToken: string;
}
export type PaymentTokenUpdatedEvent = TypedEvent<
  [string],
  PaymentTokenUpdatedEventObject
>;

export type PaymentTokenUpdatedEventFilter =
  TypedEventFilter<PaymentTokenUpdatedEvent>;

export interface RecipientUpdatedEventObject {
  newRecipient: string;
}
export type RecipientUpdatedEvent = TypedEvent<
  [string],
  RecipientUpdatedEventObject
>;

export type RecipientUpdatedEventFilter =
  TypedEventFilter<RecipientUpdatedEvent>;

export interface MarketplaceEventsAndErrors721 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceEventsAndErrors721Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AuctionSettingsUpdated(uint256,uint256,uint256,uint256)"(
      newMinDuration?: PromiseOrValue<BigNumberish> | null,
      newIncrement?: PromiseOrValue<BigNumberish> | null,
      newMinBidValue?: null,
      newMaxDuration?: PromiseOrValue<BigNumberish> | null
    ): AuctionSettingsUpdatedEventFilter;
    AuctionSettingsUpdated(
      newMinDuration?: PromiseOrValue<BigNumberish> | null,
      newIncrement?: PromiseOrValue<BigNumberish> | null,
      newMinBidValue?: null,
      newMaxDuration?: PromiseOrValue<BigNumberish> | null
    ): AuctionSettingsUpdatedEventFilter;

    "Bid(address,uint256,bytes32,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      bidder?: null,
      bidPrice?: null
    ): BidEventFilter;
    Bid(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      bidder?: null,
      bidPrice?: null
    ): BidEventFilter;

    "CancelOrder(address,uint256,bytes32,address)"(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null
    ): CancelOrderEventFilter;
    CancelOrder(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null
    ): CancelOrderEventFilter;

    "Claim(address,uint256,bytes32,address,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null,
      taker?: null,
      price?: null
    ): ClaimEventFilter;
    Claim(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null,
      taker?: null,
      price?: null
    ): ClaimEventFilter;

    "FactoryUpdated(address)"(
      newFactory?: PromiseOrValue<string> | null
    ): FactoryUpdatedEventFilter;
    FactoryUpdated(
      newFactory?: PromiseOrValue<string> | null
    ): FactoryUpdatedEventFilter;

    "FeesUpdated(uint256,uint256)"(
      feeVal2?: null,
      feeVal3?: null
    ): FeesUpdatedEventFilter;
    FeesUpdated(feeVal2?: null, feeVal3?: null): FeesUpdatedEventFilter;

    "MakeOrder(address,uint256,bytes32,address)"(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null
    ): MakeOrderEventFilter;
    MakeOrder(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null
    ): MakeOrderEventFilter;

    "PaymentTokenUpdated(address)"(
      newPaymentToken?: PromiseOrValue<string> | null
    ): PaymentTokenUpdatedEventFilter;
    PaymentTokenUpdated(
      newPaymentToken?: PromiseOrValue<string> | null
    ): PaymentTokenUpdatedEventFilter;

    "RecipientUpdated(address)"(
      newRecipient?: PromiseOrValue<string> | null
    ): RecipientUpdatedEventFilter;
    RecipientUpdated(
      newRecipient?: PromiseOrValue<string> | null
    ): RecipientUpdatedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
