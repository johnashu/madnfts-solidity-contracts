/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface MADMarketplace1155Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "basisPoints"
      | "bid"
      | "buy"
      | "cancelOrder"
      | "claim"
      | "dutchAuction"
      | "englishAuction"
      | "erc20"
      | "feeSelector"
      | "feeTier"
      | "fixedPrice"
      | "getCurrentPrice"
      | "getOutbidBalance"
      | "madFactory"
      | "maxFee"
      | "maxFeesAllowed"
      | "maxOrderDuration"
      | "maxRoyaltyFee"
      | "minAuctionIncrement"
      | "minAuctionIncrementMAX"
      | "minBidValue"
      | "minOrderDuration"
      | "minOrderDurationtMAX"
      | "name"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "orderIdBySeller"
      | "orderIdByToken"
      | "orderInfo"
      | "owner"
      | "recipient"
      | "royaltyFee"
      | "sellerOrderLength"
      | "setFactory"
      | "setFees"
      | "setMinAuctionIncrementMAX"
      | "setMinOrderDurationtMAX"
      | "setOwner"
      | "setRecipient"
      | "swapRouter"
      | "tokenOrderLength"
      | "totalOutbid"
      | "updateSettings"
      | "userOutbid"
      | "withdraw"
      | "withdrawERC20"
      | "withdrawOutbid"
      | "withdrawOutbidEth"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionSettingsUpdated"
      | "Bid"
      | "CancelOrder"
      | "Claim"
      | "FactoryUpdated"
      | "FeesUpdated(uint256,uint256)"
      | "FeesUpdated(uint256,uint256,address)"
      | "MakeOrder"
      | "OwnerUpdated"
      | "PaymentTokenUpdated"
      | "RecipientUpdated"
      | "UserOutbid"
      | "WithdrawOutbid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "basisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bid", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "buy", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "claim", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "dutchAuction",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "englishAuction",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "erc20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeSelector",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feeTier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fixedPrice",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutbidBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "madFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxFeesAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxOrderDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRoyaltyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAuctionIncrement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAuctionIncrementMAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBidValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minOrderDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minOrderDurationtMAX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orderIdBySeller",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderIdByToken",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orderInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "recipient", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "royaltyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellerOrderLength",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAuctionIncrementMAX",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinOrderDurationtMAX",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOrderLength",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalOutbid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSettings",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userOutbid",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOutbid",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOutbidEth",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "basisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dutchAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "englishAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fixedPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutbidBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "madFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxFeesAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxOrderDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRoyaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuctionIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuctionIncrementMAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBidValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minOrderDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minOrderDurationtMAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderIdBySeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderIdByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipient", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "royaltyFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellerOrderLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinAuctionIncrementMAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinOrderDurationtMAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOrderLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOutbid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userOutbid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOutbid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOutbidEth",
    data: BytesLike
  ): Result;
}

export namespace AuctionSettingsUpdatedEvent {
  export type InputTuple = [
    newMinDuration: BigNumberish,
    newIncrement: BigNumberish,
    newMinBidValue: BigNumberish,
    newMaxDuration: BigNumberish
  ];
  export type OutputTuple = [
    newMinDuration: bigint,
    newIncrement: bigint,
    newMinBidValue: bigint,
    newMaxDuration: bigint
  ];
  export interface OutputObject {
    newMinDuration: bigint;
    newIncrement: bigint;
    newMinBidValue: bigint;
    newMaxDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidEvent {
  export type InputTuple = [
    token: AddressLike,
    id: BigNumberish,
    amount: BigNumberish,
    hash: BytesLike,
    bidder: AddressLike,
    bidPrice: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    id: bigint,
    amount: bigint,
    hash: string,
    bidder: string,
    bidPrice: bigint
  ];
  export interface OutputObject {
    token: string;
    id: bigint;
    amount: bigint;
    hash: string;
    bidder: string;
    bidPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelOrderEvent {
  export type InputTuple = [
    token: AddressLike,
    id: BigNumberish,
    amount: BigNumberish,
    hash: BytesLike,
    seller: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    id: bigint,
    amount: bigint,
    hash: string,
    seller: string
  ];
  export interface OutputObject {
    token: string;
    id: bigint;
    amount: bigint;
    hash: string;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimEvent {
  export type InputTuple = [
    token: AddressLike,
    id: BigNumberish,
    amount: BigNumberish,
    hash: BytesLike,
    seller: AddressLike,
    taker: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    id: bigint,
    amount: bigint,
    hash: string,
    seller: string,
    taker: string,
    price: bigint
  ];
  export interface OutputObject {
    token: string;
    id: bigint;
    amount: bigint;
    hash: string;
    seller: string;
    taker: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FactoryUpdatedEvent {
  export type InputTuple = [newFactory: AddressLike];
  export type OutputTuple = [newFactory: string];
  export interface OutputObject {
    newFactory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdated_uint256_uint256_Event {
  export type InputTuple = [feeVal2: BigNumberish, feeVal3: BigNumberish];
  export type OutputTuple = [feeVal2: bigint, feeVal3: bigint];
  export interface OutputObject {
    feeVal2: bigint;
    feeVal3: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdated_uint256_uint256_address_Event {
  export type InputTuple = [
    feeVal2: BigNumberish,
    feeVal3: BigNumberish,
    erc20Token: AddressLike
  ];
  export type OutputTuple = [
    feeVal2: bigint,
    feeVal3: bigint,
    erc20Token: string
  ];
  export interface OutputObject {
    feeVal2: bigint;
    feeVal3: bigint;
    erc20Token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MakeOrderEvent {
  export type InputTuple = [
    token: AddressLike,
    id: BigNumberish,
    amount: BigNumberish,
    hash: BytesLike,
    seller: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    id: bigint,
    amount: bigint,
    hash: string,
    seller: string
  ];
  export interface OutputObject {
    token: string;
    id: bigint;
    amount: bigint;
    hash: string;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerUpdatedEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentTokenUpdatedEvent {
  export type InputTuple = [newPaymentToken: AddressLike];
  export type OutputTuple = [newPaymentToken: string];
  export interface OutputObject {
    newPaymentToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientUpdatedEvent {
  export type InputTuple = [newRecipient: AddressLike];
  export type OutputTuple = [newRecipient: string];
  export interface OutputObject {
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserOutbidEvent {
  export type InputTuple = [
    user: AddressLike,
    erc20: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, erc20: string, amount: bigint];
  export interface OutputObject {
    user: string;
    erc20: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawOutbidEvent {
  export type InputTuple = [
    user: AddressLike,
    erc20: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, erc20: string, amount: bigint];
  export interface OutputObject {
    user: string;
    erc20: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MADMarketplace1155 extends BaseContract {
  connect(runner?: ContractRunner | null): MADMarketplace1155;
  waitForDeployment(): Promise<this>;

  interface: MADMarketplace1155Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  basisPoints: TypedContractMethod<[], [bigint], "view">;

  bid: TypedContractMethod<[_order: BytesLike], [void], "payable">;

  buy: TypedContractMethod<[_order: BytesLike], [void], "payable">;

  cancelOrder: TypedContractMethod<[_order: BytesLike], [void], "nonpayable">;

  claim: TypedContractMethod<[_order: BytesLike], [void], "nonpayable">;

  dutchAuction: TypedContractMethod<
    [
      _token: AddressLike,
      _id: BigNumberish,
      _amount: BigNumberish,
      _startPrice: BigNumberish,
      _endPrice: BigNumberish,
      _endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  englishAuction: TypedContractMethod<
    [
      _token: AddressLike,
      _id: BigNumberish,
      _amount: BigNumberish,
      _startPrice: BigNumberish,
      _endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  erc20: TypedContractMethod<[], [string], "view">;

  feeSelector: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [boolean],
    "view"
  >;

  feeTier: TypedContractMethod<[], [bigint], "view">;

  fixedPrice: TypedContractMethod<
    [
      _token: AddressLike,
      _id: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getCurrentPrice: TypedContractMethod<[_order: BytesLike], [bigint], "view">;

  getOutbidBalance: TypedContractMethod<[], [bigint], "view">;

  madFactory: TypedContractMethod<[], [string], "view">;

  maxFee: TypedContractMethod<[], [bigint], "view">;

  maxFeesAllowed: TypedContractMethod<[], [bigint], "view">;

  maxOrderDuration: TypedContractMethod<[], [bigint], "view">;

  maxRoyaltyFee: TypedContractMethod<[], [bigint], "view">;

  minAuctionIncrement: TypedContractMethod<[], [bigint], "view">;

  minAuctionIncrementMAX: TypedContractMethod<[], [bigint], "view">;

  minBidValue: TypedContractMethod<[], [bigint], "view">;

  minOrderDuration: TypedContractMethod<[], [bigint], "view">;

  minOrderDurationtMAX: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  orderIdBySeller: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  orderIdByToken: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [string],
    "view"
  >;

  orderInfo: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        boolean
      ] & {
        tokenId: bigint;
        amount: bigint;
        startPrice: bigint;
        endPrice: bigint;
        startTime: bigint;
        endTime: bigint;
        lastBidPrice: bigint;
        lastBidder: string;
        token: string;
        seller: string;
        orderType: bigint;
        isSold: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  recipient: TypedContractMethod<[], [string], "view">;

  royaltyFee: TypedContractMethod<[], [bigint], "view">;

  sellerOrderLength: TypedContractMethod<
    [_seller: AddressLike],
    [bigint],
    "view"
  >;

  setFactory: TypedContractMethod<
    [_factory: AddressLike],
    [void],
    "nonpayable"
  >;

  setFees: TypedContractMethod<
    [_royaltyFee: BigNumberish, _maxFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinAuctionIncrementMAX: TypedContractMethod<
    [_minAuctionIncrementMAX: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinOrderDurationtMAX: TypedContractMethod<
    [_minOrderDurationtMAX: BigNumberish],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  setRecipient: TypedContractMethod<
    [_recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  swapRouter: TypedContractMethod<[], [string], "view">;

  tokenOrderLength: TypedContractMethod<
    [_token: AddressLike, _id: BigNumberish, _amount: BigNumberish],
    [bigint],
    "view"
  >;

  totalOutbid: TypedContractMethod<[], [bigint], "view">;

  updateSettings: TypedContractMethod<
    [
      _minAuctionIncrement: BigNumberish,
      _minOrderDuration: BigNumberish,
      _minBidValue: BigNumberish,
      _maxOrderDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  userOutbid: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  withdrawERC20: TypedContractMethod<[], [void], "nonpayable">;

  withdrawOutbid: TypedContractMethod<
    [_token: AddressLike, minOut: BigNumberish, priceLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawOutbidEth: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "basisPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "bid"
  ): TypedContractMethod<[_order: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "buy"
  ): TypedContractMethod<[_order: BytesLike], [void], "payable">;
  getFunction(
    nameOrSignature: "cancelOrder"
  ): TypedContractMethod<[_order: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[_order: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dutchAuction"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _id: BigNumberish,
      _amount: BigNumberish,
      _startPrice: BigNumberish,
      _endPrice: BigNumberish,
      _endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "englishAuction"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _id: BigNumberish,
      _amount: BigNumberish,
      _startPrice: BigNumberish,
      _endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "erc20"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeSelector"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish, arg2: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeTier"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fixedPrice"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _id: BigNumberish,
      _amount: BigNumberish,
      _price: BigNumberish,
      _endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCurrentPrice"
  ): TypedContractMethod<[_order: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOutbidBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "madFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "maxFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxFeesAllowed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxOrderDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxRoyaltyFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minAuctionIncrement"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minAuctionIncrementMAX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minBidValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minOrderDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minOrderDurationtMAX"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "orderIdBySeller"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "orderIdByToken"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "orderInfo"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        bigint,
        boolean
      ] & {
        tokenId: bigint;
        amount: bigint;
        startPrice: bigint;
        endPrice: bigint;
        startTime: bigint;
        endTime: bigint;
        lastBidPrice: bigint;
        lastBidder: string;
        token: string;
        seller: string;
        orderType: bigint;
        isSold: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "royaltyFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sellerOrderLength"
  ): TypedContractMethod<[_seller: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setFactory"
  ): TypedContractMethod<[_factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFees"
  ): TypedContractMethod<
    [_royaltyFee: BigNumberish, _maxFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinAuctionIncrementMAX"
  ): TypedContractMethod<
    [_minAuctionIncrementMAX: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinOrderDurationtMAX"
  ): TypedContractMethod<
    [_minOrderDurationtMAX: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRecipient"
  ): TypedContractMethod<[_recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "swapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenOrderLength"
  ): TypedContractMethod<
    [_token: AddressLike, _id: BigNumberish, _amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalOutbid"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateSettings"
  ): TypedContractMethod<
    [
      _minAuctionIncrement: BigNumberish,
      _minOrderDuration: BigNumberish,
      _minBidValue: BigNumberish,
      _maxOrderDuration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userOutbid"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawERC20"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawOutbid"
  ): TypedContractMethod<
    [_token: AddressLike, minOut: BigNumberish, priceLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawOutbidEth"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AuctionSettingsUpdated"
  ): TypedContractEvent<
    AuctionSettingsUpdatedEvent.InputTuple,
    AuctionSettingsUpdatedEvent.OutputTuple,
    AuctionSettingsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Bid"
  ): TypedContractEvent<
    BidEvent.InputTuple,
    BidEvent.OutputTuple,
    BidEvent.OutputObject
  >;
  getEvent(
    key: "CancelOrder"
  ): TypedContractEvent<
    CancelOrderEvent.InputTuple,
    CancelOrderEvent.OutputTuple,
    CancelOrderEvent.OutputObject
  >;
  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "FactoryUpdated"
  ): TypedContractEvent<
    FactoryUpdatedEvent.InputTuple,
    FactoryUpdatedEvent.OutputTuple,
    FactoryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated(uint256,uint256)"
  ): TypedContractEvent<
    FeesUpdated_uint256_uint256_Event.InputTuple,
    FeesUpdated_uint256_uint256_Event.OutputTuple,
    FeesUpdated_uint256_uint256_Event.OutputObject
  >;
  getEvent(
    key: "FeesUpdated(uint256,uint256,address)"
  ): TypedContractEvent<
    FeesUpdated_uint256_uint256_address_Event.InputTuple,
    FeesUpdated_uint256_uint256_address_Event.OutputTuple,
    FeesUpdated_uint256_uint256_address_Event.OutputObject
  >;
  getEvent(
    key: "MakeOrder"
  ): TypedContractEvent<
    MakeOrderEvent.InputTuple,
    MakeOrderEvent.OutputTuple,
    MakeOrderEvent.OutputObject
  >;
  getEvent(
    key: "OwnerUpdated"
  ): TypedContractEvent<
    OwnerUpdatedEvent.InputTuple,
    OwnerUpdatedEvent.OutputTuple,
    OwnerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentTokenUpdated"
  ): TypedContractEvent<
    PaymentTokenUpdatedEvent.InputTuple,
    PaymentTokenUpdatedEvent.OutputTuple,
    PaymentTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RecipientUpdated"
  ): TypedContractEvent<
    RecipientUpdatedEvent.InputTuple,
    RecipientUpdatedEvent.OutputTuple,
    RecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserOutbid"
  ): TypedContractEvent<
    UserOutbidEvent.InputTuple,
    UserOutbidEvent.OutputTuple,
    UserOutbidEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawOutbid"
  ): TypedContractEvent<
    WithdrawOutbidEvent.InputTuple,
    WithdrawOutbidEvent.OutputTuple,
    WithdrawOutbidEvent.OutputObject
  >;

  filters: {
    "AuctionSettingsUpdated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      AuctionSettingsUpdatedEvent.InputTuple,
      AuctionSettingsUpdatedEvent.OutputTuple,
      AuctionSettingsUpdatedEvent.OutputObject
    >;
    AuctionSettingsUpdated: TypedContractEvent<
      AuctionSettingsUpdatedEvent.InputTuple,
      AuctionSettingsUpdatedEvent.OutputTuple,
      AuctionSettingsUpdatedEvent.OutputObject
    >;

    "Bid(address,uint256,uint256,bytes32,address,uint256)": TypedContractEvent<
      BidEvent.InputTuple,
      BidEvent.OutputTuple,
      BidEvent.OutputObject
    >;
    Bid: TypedContractEvent<
      BidEvent.InputTuple,
      BidEvent.OutputTuple,
      BidEvent.OutputObject
    >;

    "CancelOrder(address,uint256,uint256,bytes32,address)": TypedContractEvent<
      CancelOrderEvent.InputTuple,
      CancelOrderEvent.OutputTuple,
      CancelOrderEvent.OutputObject
    >;
    CancelOrder: TypedContractEvent<
      CancelOrderEvent.InputTuple,
      CancelOrderEvent.OutputTuple,
      CancelOrderEvent.OutputObject
    >;

    "Claim(address,uint256,uint256,bytes32,address,address,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "FactoryUpdated(address)": TypedContractEvent<
      FactoryUpdatedEvent.InputTuple,
      FactoryUpdatedEvent.OutputTuple,
      FactoryUpdatedEvent.OutputObject
    >;
    FactoryUpdated: TypedContractEvent<
      FactoryUpdatedEvent.InputTuple,
      FactoryUpdatedEvent.OutputTuple,
      FactoryUpdatedEvent.OutputObject
    >;

    "FeesUpdated(uint256,uint256)": TypedContractEvent<
      FeesUpdated_uint256_uint256_Event.InputTuple,
      FeesUpdated_uint256_uint256_Event.OutputTuple,
      FeesUpdated_uint256_uint256_Event.OutputObject
    >;
    "FeesUpdated(uint256,uint256,address)": TypedContractEvent<
      FeesUpdated_uint256_uint256_address_Event.InputTuple,
      FeesUpdated_uint256_uint256_address_Event.OutputTuple,
      FeesUpdated_uint256_uint256_address_Event.OutputObject
    >;

    "MakeOrder(address,uint256,uint256,bytes32,address)": TypedContractEvent<
      MakeOrderEvent.InputTuple,
      MakeOrderEvent.OutputTuple,
      MakeOrderEvent.OutputObject
    >;
    MakeOrder: TypedContractEvent<
      MakeOrderEvent.InputTuple,
      MakeOrderEvent.OutputTuple,
      MakeOrderEvent.OutputObject
    >;

    "OwnerUpdated(address,address)": TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
    OwnerUpdated: TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;

    "PaymentTokenUpdated(address)": TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;
    PaymentTokenUpdated: TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;

    "RecipientUpdated(address)": TypedContractEvent<
      RecipientUpdatedEvent.InputTuple,
      RecipientUpdatedEvent.OutputTuple,
      RecipientUpdatedEvent.OutputObject
    >;
    RecipientUpdated: TypedContractEvent<
      RecipientUpdatedEvent.InputTuple,
      RecipientUpdatedEvent.OutputTuple,
      RecipientUpdatedEvent.OutputObject
    >;

    "UserOutbid(address,address,uint256)": TypedContractEvent<
      UserOutbidEvent.InputTuple,
      UserOutbidEvent.OutputTuple,
      UserOutbidEvent.OutputObject
    >;
    UserOutbid: TypedContractEvent<
      UserOutbidEvent.InputTuple,
      UserOutbidEvent.OutputTuple,
      UserOutbidEvent.OutputObject
    >;

    "WithdrawOutbid(address,address,uint256)": TypedContractEvent<
      WithdrawOutbidEvent.InputTuple,
      WithdrawOutbidEvent.OutputTuple,
      WithdrawOutbidEvent.OutputObject
    >;
    WithdrawOutbid: TypedContractEvent<
      WithdrawOutbidEvent.InputTuple,
      WithdrawOutbidEvent.OutputTuple,
      WithdrawOutbidEvent.OutputObject
    >;
  };
}
