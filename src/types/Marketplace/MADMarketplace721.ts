/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface MADMarketplace721Interface extends utils.Interface {
  functions: {
    "basisPoints()": FunctionFragment;
    "bid(bytes32)": FunctionFragment;
    "buy(bytes32)": FunctionFragment;
    "cancelOrder(bytes32)": FunctionFragment;
    "claim(bytes32)": FunctionFragment;
    "dutchAuction(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "englishAuction(address,uint256,uint256,uint256)": FunctionFragment;
    "erc20()": FunctionFragment;
    "feeSelector(uint256,uint256)": FunctionFragment;
    "feeTier()": FunctionFragment;
    "fixedPrice(address,uint256,uint256,uint256)": FunctionFragment;
    "getCurrentPrice(bytes32)": FunctionFragment;
    "getOutbidBalance()": FunctionFragment;
    "madFactory()": FunctionFragment;
    "maxFee()": FunctionFragment;
    "maxFeesAllowed()": FunctionFragment;
    "maxOrderDuration()": FunctionFragment;
    "maxRoyaltyFee()": FunctionFragment;
    "minAuctionIncrement()": FunctionFragment;
    "minAuctionIncrementMAX()": FunctionFragment;
    "minBidValue()": FunctionFragment;
    "minOrderDuration()": FunctionFragment;
    "minOrderDurationtMAX()": FunctionFragment;
    "name()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "orderIdBySeller(address,uint256)": FunctionFragment;
    "orderIdByToken(address,uint256,uint256)": FunctionFragment;
    "orderInfo(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "recipient()": FunctionFragment;
    "royaltyFee()": FunctionFragment;
    "sellerOrderLength(address)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "setFees(uint256,uint256)": FunctionFragment;
    "setMinAuctionIncrementMAX(uint256)": FunctionFragment;
    "setMinOrderDurationtMAX(uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setRecipient(address)": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "tokenOrderLength(address,uint256)": FunctionFragment;
    "totalOutbid()": FunctionFragment;
    "updateSettings(uint256,uint256,uint256,uint256)": FunctionFragment;
    "userOutbid(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawERC20()": FunctionFragment;
    "withdrawOutbid(address,uint256,uint160)": FunctionFragment;
    "withdrawOutbidEth()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "basisPoints"
      | "bid"
      | "buy"
      | "cancelOrder"
      | "claim"
      | "dutchAuction"
      | "englishAuction"
      | "erc20"
      | "feeSelector"
      | "feeTier"
      | "fixedPrice"
      | "getCurrentPrice"
      | "getOutbidBalance"
      | "madFactory"
      | "maxFee"
      | "maxFeesAllowed"
      | "maxOrderDuration"
      | "maxRoyaltyFee"
      | "minAuctionIncrement"
      | "minAuctionIncrementMAX"
      | "minBidValue"
      | "minOrderDuration"
      | "minOrderDurationtMAX"
      | "name"
      | "onERC721Received"
      | "orderIdBySeller"
      | "orderIdByToken"
      | "orderInfo"
      | "owner"
      | "recipient"
      | "royaltyFee"
      | "sellerOrderLength"
      | "setFactory"
      | "setFees"
      | "setMinAuctionIncrementMAX"
      | "setMinOrderDurationtMAX"
      | "setOwner"
      | "setRecipient"
      | "swapRouter"
      | "tokenOrderLength"
      | "totalOutbid"
      | "updateSettings"
      | "userOutbid"
      | "withdraw"
      | "withdrawERC20"
      | "withdrawOutbid"
      | "withdrawOutbidEth"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "basisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "dutchAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "englishAuction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "erc20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeSelector",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "feeTier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fixedPrice",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOutbidBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "madFactory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxFeesAllowed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxOrderDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRoyaltyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAuctionIncrement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minAuctionIncrementMAX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minBidValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minOrderDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minOrderDurationtMAX",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "orderIdBySeller",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderIdByToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "orderInfo",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "recipient", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "royaltyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellerOrderLength",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinAuctionIncrementMAX",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinOrderDurationtMAX",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecipient",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOrderLength",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalOutbid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSettings",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userOutbid",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOutbid",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOutbidEth",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "basisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dutchAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "englishAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fixedPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOutbidBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "madFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxFeesAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxOrderDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRoyaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuctionIncrement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minAuctionIncrementMAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minBidValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minOrderDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minOrderDurationtMAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderIdBySeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderIdByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orderInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipient", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "royaltyFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellerOrderLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinAuctionIncrementMAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinOrderDurationtMAX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenOrderLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOutbid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userOutbid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOutbid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOutbidEth",
    data: BytesLike
  ): Result;

  events: {
    "AuctionSettingsUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "Bid(address,uint256,bytes32,address,uint256)": EventFragment;
    "CancelOrder(address,uint256,bytes32,address)": EventFragment;
    "Claim(address,uint256,bytes32,address,address,uint256)": EventFragment;
    "FactoryUpdated(address)": EventFragment;
    "FeesUpdated(uint256,uint256)": EventFragment;
    "MakeOrder(address,uint256,bytes32,address)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
    "PaymentTokenUpdated(address)": EventFragment;
    "RecipientUpdated(address)": EventFragment;
    "UserOutbid(address,address,uint256)": EventFragment;
    "WithdrawOutbid(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionSettingsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactoryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakeOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecipientUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserOutbid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawOutbid"): EventFragment;
}

export interface AuctionSettingsUpdatedEventObject {
  newMinDuration: BigNumber;
  newIncrement: BigNumber;
  newMinBidValue: BigNumber;
  newMaxDuration: BigNumber;
}
export type AuctionSettingsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AuctionSettingsUpdatedEventObject
>;

export type AuctionSettingsUpdatedEventFilter =
  TypedEventFilter<AuctionSettingsUpdatedEvent>;

export interface BidEventObject {
  token: string;
  id: BigNumber;
  hash: string;
  bidder: string;
  bidPrice: BigNumber;
}
export type BidEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber],
  BidEventObject
>;

export type BidEventFilter = TypedEventFilter<BidEvent>;

export interface CancelOrderEventObject {
  token: string;
  id: BigNumber;
  hash: string;
  seller: string;
}
export type CancelOrderEvent = TypedEvent<
  [string, BigNumber, string, string],
  CancelOrderEventObject
>;

export type CancelOrderEventFilter = TypedEventFilter<CancelOrderEvent>;

export interface ClaimEventObject {
  token: string;
  id: BigNumber;
  hash: string;
  seller: string;
  taker: string;
  price: BigNumber;
}
export type ClaimEvent = TypedEvent<
  [string, BigNumber, string, string, string, BigNumber],
  ClaimEventObject
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export interface FactoryUpdatedEventObject {
  newFactory: string;
}
export type FactoryUpdatedEvent = TypedEvent<
  [string],
  FactoryUpdatedEventObject
>;

export type FactoryUpdatedEventFilter = TypedEventFilter<FactoryUpdatedEvent>;

export interface FeesUpdatedEventObject {
  feeVal2: BigNumber;
  feeVal3: BigNumber;
}
export type FeesUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FeesUpdatedEventObject
>;

export type FeesUpdatedEventFilter = TypedEventFilter<FeesUpdatedEvent>;

export interface MakeOrderEventObject {
  token: string;
  id: BigNumber;
  hash: string;
  seller: string;
}
export type MakeOrderEvent = TypedEvent<
  [string, BigNumber, string, string],
  MakeOrderEventObject
>;

export type MakeOrderEventFilter = TypedEventFilter<MakeOrderEvent>;

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface PaymentTokenUpdatedEventObject {
  newPaymentToken: string;
}
export type PaymentTokenUpdatedEvent = TypedEvent<
  [string],
  PaymentTokenUpdatedEventObject
>;

export type PaymentTokenUpdatedEventFilter =
  TypedEventFilter<PaymentTokenUpdatedEvent>;

export interface RecipientUpdatedEventObject {
  newRecipient: string;
}
export type RecipientUpdatedEvent = TypedEvent<
  [string],
  RecipientUpdatedEventObject
>;

export type RecipientUpdatedEventFilter =
  TypedEventFilter<RecipientUpdatedEvent>;

export interface UserOutbidEventObject {
  user: string;
  erc20: string;
  amount: BigNumber;
}
export type UserOutbidEvent = TypedEvent<
  [string, string, BigNumber],
  UserOutbidEventObject
>;

export type UserOutbidEventFilter = TypedEventFilter<UserOutbidEvent>;

export interface WithdrawOutbidEventObject {
  user: string;
  erc20: string;
  amount: BigNumber;
}
export type WithdrawOutbidEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawOutbidEventObject
>;

export type WithdrawOutbidEventFilter = TypedEventFilter<WithdrawOutbidEvent>;

export interface MADMarketplace721 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MADMarketplace721Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    basisPoints(overrides?: CallOverrides): Promise<[number]>;

    bid(
      _order: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buy(
      _order: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      _order: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      _order: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dutchAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endPrice: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    englishAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    erc20(overrides?: CallOverrides): Promise<[string]>;

    feeSelector(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    feeTier(overrides?: CallOverrides): Promise<[number]>;

    fixedPrice(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getCurrentPrice(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getOutbidBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    madFactory(overrides?: CallOverrides): Promise<[string]>;

    maxFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxFeesAllowed(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxOrderDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxRoyaltyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAuctionIncrement(overrides?: CallOverrides): Promise<[BigNumber]>;

    minAuctionIncrementMAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    minBidValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    minOrderDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    minOrderDurationtMAX(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    orderIdBySeller(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    orderIdByToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    orderInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        number,
        boolean
      ] & {
        tokenId: BigNumber;
        startPrice: BigNumber;
        endPrice: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        lastBidPrice: BigNumber;
        lastBidder: string;
        token: string;
        seller: string;
        orderType: number;
        isSold: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recipient(overrides?: CallOverrides): Promise<[string]>;

    royaltyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellerOrderLength(
      _seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFees(
      _royaltyFee: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinAuctionIncrementMAX(
      _minAuctionIncrementMAX: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinOrderDurationtMAX(
      _minOrderDurationtMAX: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRecipient(
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    tokenOrderLength(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    totalOutbid(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateSettings(
      _minAuctionIncrement: PromiseOrValue<BigNumberish>,
      _minOrderDuration: PromiseOrValue<BigNumberish>,
      _minBidValue: PromiseOrValue<BigNumberish>,
      _maxOrderDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userOutbid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawOutbid(
      _token: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawOutbidEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  basisPoints(overrides?: CallOverrides): Promise<number>;

  bid(
    _order: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buy(
    _order: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    _order: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    _order: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dutchAuction(
    _token: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _startPrice: PromiseOrValue<BigNumberish>,
    _endPrice: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  englishAuction(
    _token: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _startPrice: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  erc20(overrides?: CallOverrides): Promise<string>;

  feeSelector(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  feeTier(overrides?: CallOverrides): Promise<number>;

  fixedPrice(
    _token: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    _price: PromiseOrValue<BigNumberish>,
    _endTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getCurrentPrice(
    _order: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOutbidBalance(overrides?: CallOverrides): Promise<BigNumber>;

  madFactory(overrides?: CallOverrides): Promise<string>;

  maxFee(overrides?: CallOverrides): Promise<BigNumber>;

  maxFeesAllowed(overrides?: CallOverrides): Promise<BigNumber>;

  maxOrderDuration(overrides?: CallOverrides): Promise<BigNumber>;

  maxRoyaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

  minAuctionIncrement(overrides?: CallOverrides): Promise<BigNumber>;

  minAuctionIncrementMAX(overrides?: CallOverrides): Promise<BigNumber>;

  minBidValue(overrides?: CallOverrides): Promise<BigNumber>;

  minOrderDuration(overrides?: CallOverrides): Promise<BigNumber>;

  minOrderDurationtMAX(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  orderIdBySeller(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  orderIdByToken(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  orderInfo(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      number,
      boolean
    ] & {
      tokenId: BigNumber;
      startPrice: BigNumber;
      endPrice: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      lastBidPrice: BigNumber;
      lastBidder: string;
      token: string;
      seller: string;
      orderType: number;
      isSold: boolean;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  recipient(overrides?: CallOverrides): Promise<string>;

  royaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

  sellerOrderLength(
    _seller: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFactory(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFees(
    _royaltyFee: PromiseOrValue<BigNumberish>,
    _maxFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinAuctionIncrementMAX(
    _minAuctionIncrementMAX: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinOrderDurationtMAX(
    _minOrderDurationtMAX: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRecipient(
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  tokenOrderLength(
    _token: PromiseOrValue<string>,
    _id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalOutbid(overrides?: CallOverrides): Promise<BigNumber>;

  updateSettings(
    _minAuctionIncrement: PromiseOrValue<BigNumberish>,
    _minOrderDuration: PromiseOrValue<BigNumberish>,
    _minBidValue: PromiseOrValue<BigNumberish>,
    _maxOrderDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userOutbid(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawOutbid(
    _token: PromiseOrValue<string>,
    minOut: PromiseOrValue<BigNumberish>,
    priceLimit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawOutbidEth(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    basisPoints(overrides?: CallOverrides): Promise<number>;

    bid(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    dutchAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endPrice: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    englishAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    erc20(overrides?: CallOverrides): Promise<string>;

    feeSelector(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    feeTier(overrides?: CallOverrides): Promise<number>;

    fixedPrice(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentPrice(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutbidBalance(overrides?: CallOverrides): Promise<BigNumber>;

    madFactory(overrides?: CallOverrides): Promise<string>;

    maxFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxFeesAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    maxOrderDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxRoyaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionIncrement(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionIncrementMAX(overrides?: CallOverrides): Promise<BigNumber>;

    minBidValue(overrides?: CallOverrides): Promise<BigNumber>;

    minOrderDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minOrderDurationtMAX(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    orderIdBySeller(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    orderIdByToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    orderInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        number,
        boolean
      ] & {
        tokenId: BigNumber;
        startPrice: BigNumber;
        endPrice: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        lastBidPrice: BigNumber;
        lastBidder: string;
        token: string;
        seller: string;
        orderType: number;
        isSold: boolean;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    recipient(overrides?: CallOverrides): Promise<string>;

    royaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellerOrderLength(
      _seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFees(
      _royaltyFee: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinAuctionIncrementMAX(
      _minAuctionIncrementMAX: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinOrderDurationtMAX(
      _minOrderDurationtMAX: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRecipient(
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    tokenOrderLength(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalOutbid(overrides?: CallOverrides): Promise<BigNumber>;

    updateSettings(
      _minAuctionIncrement: PromiseOrValue<BigNumberish>,
      _minOrderDuration: PromiseOrValue<BigNumberish>,
      _minBidValue: PromiseOrValue<BigNumberish>,
      _maxOrderDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userOutbid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawERC20(overrides?: CallOverrides): Promise<void>;

    withdrawOutbid(
      _token: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawOutbidEth(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AuctionSettingsUpdated(uint256,uint256,uint256,uint256)"(
      newMinDuration?: PromiseOrValue<BigNumberish> | null,
      newIncrement?: PromiseOrValue<BigNumberish> | null,
      newMinBidValue?: null,
      newMaxDuration?: PromiseOrValue<BigNumberish> | null
    ): AuctionSettingsUpdatedEventFilter;
    AuctionSettingsUpdated(
      newMinDuration?: PromiseOrValue<BigNumberish> | null,
      newIncrement?: PromiseOrValue<BigNumberish> | null,
      newMinBidValue?: null,
      newMaxDuration?: PromiseOrValue<BigNumberish> | null
    ): AuctionSettingsUpdatedEventFilter;

    "Bid(address,uint256,bytes32,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      bidder?: null,
      bidPrice?: null
    ): BidEventFilter;
    Bid(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      bidder?: null,
      bidPrice?: null
    ): BidEventFilter;

    "CancelOrder(address,uint256,bytes32,address)"(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null
    ): CancelOrderEventFilter;
    CancelOrder(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null
    ): CancelOrderEventFilter;

    "Claim(address,uint256,bytes32,address,address,uint256)"(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null,
      taker?: null,
      price?: null
    ): ClaimEventFilter;
    Claim(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null,
      taker?: null,
      price?: null
    ): ClaimEventFilter;

    "FactoryUpdated(address)"(
      newFactory?: PromiseOrValue<string> | null
    ): FactoryUpdatedEventFilter;
    FactoryUpdated(
      newFactory?: PromiseOrValue<string> | null
    ): FactoryUpdatedEventFilter;

    "FeesUpdated(uint256,uint256)"(
      feeVal2?: null,
      feeVal3?: null
    ): FeesUpdatedEventFilter;
    FeesUpdated(feeVal2?: null, feeVal3?: null): FeesUpdatedEventFilter;

    "MakeOrder(address,uint256,bytes32,address)"(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null
    ): MakeOrderEventFilter;
    MakeOrder(
      token?: PromiseOrValue<string> | null,
      id?: null,
      hash?: PromiseOrValue<BytesLike> | null,
      seller?: null
    ): MakeOrderEventFilter;

    "OwnerUpdated(address,address)"(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;

    "PaymentTokenUpdated(address)"(
      newPaymentToken?: PromiseOrValue<string> | null
    ): PaymentTokenUpdatedEventFilter;
    PaymentTokenUpdated(
      newPaymentToken?: PromiseOrValue<string> | null
    ): PaymentTokenUpdatedEventFilter;

    "RecipientUpdated(address)"(
      newRecipient?: PromiseOrValue<string> | null
    ): RecipientUpdatedEventFilter;
    RecipientUpdated(
      newRecipient?: PromiseOrValue<string> | null
    ): RecipientUpdatedEventFilter;

    "UserOutbid(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      erc20?: null,
      amount?: null
    ): UserOutbidEventFilter;
    UserOutbid(
      user?: PromiseOrValue<string> | null,
      erc20?: null,
      amount?: null
    ): UserOutbidEventFilter;

    "WithdrawOutbid(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      erc20?: null,
      amount?: null
    ): WithdrawOutbidEventFilter;
    WithdrawOutbid(
      user?: PromiseOrValue<string> | null,
      erc20?: null,
      amount?: null
    ): WithdrawOutbidEventFilter;
  };

  estimateGas: {
    basisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      _order: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buy(
      _order: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      _order: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      _order: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dutchAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endPrice: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    englishAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    erc20(overrides?: CallOverrides): Promise<BigNumber>;

    feeSelector(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeTier(overrides?: CallOverrides): Promise<BigNumber>;

    fixedPrice(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getCurrentPrice(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOutbidBalance(overrides?: CallOverrides): Promise<BigNumber>;

    madFactory(overrides?: CallOverrides): Promise<BigNumber>;

    maxFee(overrides?: CallOverrides): Promise<BigNumber>;

    maxFeesAllowed(overrides?: CallOverrides): Promise<BigNumber>;

    maxOrderDuration(overrides?: CallOverrides): Promise<BigNumber>;

    maxRoyaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionIncrement(overrides?: CallOverrides): Promise<BigNumber>;

    minAuctionIncrementMAX(overrides?: CallOverrides): Promise<BigNumber>;

    minBidValue(overrides?: CallOverrides): Promise<BigNumber>;

    minOrderDuration(overrides?: CallOverrides): Promise<BigNumber>;

    minOrderDurationtMAX(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    orderIdBySeller(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderIdByToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recipient(overrides?: CallOverrides): Promise<BigNumber>;

    royaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

    sellerOrderLength(
      _seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFees(
      _royaltyFee: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinAuctionIncrementMAX(
      _minAuctionIncrementMAX: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinOrderDurationtMAX(
      _minOrderDurationtMAX: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRecipient(
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    tokenOrderLength(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalOutbid(overrides?: CallOverrides): Promise<BigNumber>;

    updateSettings(
      _minAuctionIncrement: PromiseOrValue<BigNumberish>,
      _minOrderDuration: PromiseOrValue<BigNumberish>,
      _minBidValue: PromiseOrValue<BigNumberish>,
      _maxOrderDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userOutbid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawOutbid(
      _token: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawOutbidEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    basisPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bid(
      _order: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buy(
      _order: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      _order: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _order: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dutchAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endPrice: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    englishAuction(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _startPrice: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    erc20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeSelector(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeTier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fixedPrice(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      _price: PromiseOrValue<BigNumberish>,
      _endTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentPrice(
      _order: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOutbidBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    madFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxFeesAllowed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxOrderDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxRoyaltyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAuctionIncrement(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minAuctionIncrementMAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBidValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minOrderDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minOrderDurationtMAX(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    orderIdBySeller(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderIdByToken(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderInfo(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    royaltyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellerOrderLength(
      _seller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFees(
      _royaltyFee: PromiseOrValue<BigNumberish>,
      _maxFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinAuctionIncrementMAX(
      _minAuctionIncrementMAX: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinOrderDurationtMAX(
      _minOrderDurationtMAX: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRecipient(
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOrderLength(
      _token: PromiseOrValue<string>,
      _id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalOutbid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateSettings(
      _minAuctionIncrement: PromiseOrValue<BigNumberish>,
      _minOrderDuration: PromiseOrValue<BigNumberish>,
      _minBidValue: PromiseOrValue<BigNumberish>,
      _maxOrderDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userOutbid(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawOutbid(
      _token: PromiseOrValue<string>,
      minOut: PromiseOrValue<BigNumberish>,
      priceLimit: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawOutbidEth(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
