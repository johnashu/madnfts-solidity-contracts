/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export interface MarketplaceEventsAndErrors721Interface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AuctionSettingsUpdated"
      | "Bid"
      | "CancelOrder"
      | "Claim"
      | "FactoryUpdated"
      | "FeesUpdated"
      | "MakeOrder"
      | "PaymentTokenUpdated"
      | "RecipientUpdated"
      | "UserOutbid"
      | "WithdrawOutbid"
  ): EventFragment;
}

export namespace AuctionSettingsUpdatedEvent {
  export type InputTuple = [
    newMinDuration: BigNumberish,
    newIncrement: BigNumberish,
    newMinBidValue: BigNumberish,
    newMaxDuration: BigNumberish
  ];
  export type OutputTuple = [
    newMinDuration: bigint,
    newIncrement: bigint,
    newMinBidValue: bigint,
    newMaxDuration: bigint
  ];
  export interface OutputObject {
    newMinDuration: bigint;
    newIncrement: bigint;
    newMinBidValue: bigint;
    newMaxDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BidEvent {
  export type InputTuple = [
    token: AddressLike,
    id: BigNumberish,
    hash: BytesLike,
    bidder: AddressLike,
    bidPrice: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    id: bigint,
    hash: string,
    bidder: string,
    bidPrice: bigint
  ];
  export interface OutputObject {
    token: string;
    id: bigint;
    hash: string;
    bidder: string;
    bidPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelOrderEvent {
  export type InputTuple = [
    token: AddressLike,
    id: BigNumberish,
    hash: BytesLike,
    seller: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    id: bigint,
    hash: string,
    seller: string
  ];
  export interface OutputObject {
    token: string;
    id: bigint;
    hash: string;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimEvent {
  export type InputTuple = [
    token: AddressLike,
    id: BigNumberish,
    hash: BytesLike,
    seller: AddressLike,
    taker: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    id: bigint,
    hash: string,
    seller: string,
    taker: string,
    price: bigint
  ];
  export interface OutputObject {
    token: string;
    id: bigint;
    hash: string;
    seller: string;
    taker: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FactoryUpdatedEvent {
  export type InputTuple = [newFactory: AddressLike];
  export type OutputTuple = [newFactory: string];
  export interface OutputObject {
    newFactory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [feeVal2: BigNumberish, feeVal3: BigNumberish];
  export type OutputTuple = [feeVal2: bigint, feeVal3: bigint];
  export interface OutputObject {
    feeVal2: bigint;
    feeVal3: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MakeOrderEvent {
  export type InputTuple = [
    token: AddressLike,
    id: BigNumberish,
    hash: BytesLike,
    seller: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    id: bigint,
    hash: string,
    seller: string
  ];
  export interface OutputObject {
    token: string;
    id: bigint;
    hash: string;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentTokenUpdatedEvent {
  export type InputTuple = [newPaymentToken: AddressLike];
  export type OutputTuple = [newPaymentToken: string];
  export interface OutputObject {
    newPaymentToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientUpdatedEvent {
  export type InputTuple = [newRecipient: AddressLike];
  export type OutputTuple = [newRecipient: string];
  export interface OutputObject {
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UserOutbidEvent {
  export type InputTuple = [
    user: AddressLike,
    erc20: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, erc20: string, amount: bigint];
  export interface OutputObject {
    user: string;
    erc20: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawOutbidEvent {
  export type InputTuple = [
    user: AddressLike,
    erc20: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, erc20: string, amount: bigint];
  export interface OutputObject {
    user: string;
    erc20: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MarketplaceEventsAndErrors721 extends BaseContract {
  connect(runner?: ContractRunner | null): MarketplaceEventsAndErrors721;
  waitForDeployment(): Promise<this>;

  interface: MarketplaceEventsAndErrors721Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AuctionSettingsUpdated"
  ): TypedContractEvent<
    AuctionSettingsUpdatedEvent.InputTuple,
    AuctionSettingsUpdatedEvent.OutputTuple,
    AuctionSettingsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Bid"
  ): TypedContractEvent<
    BidEvent.InputTuple,
    BidEvent.OutputTuple,
    BidEvent.OutputObject
  >;
  getEvent(
    key: "CancelOrder"
  ): TypedContractEvent<
    CancelOrderEvent.InputTuple,
    CancelOrderEvent.OutputTuple,
    CancelOrderEvent.OutputObject
  >;
  getEvent(
    key: "Claim"
  ): TypedContractEvent<
    ClaimEvent.InputTuple,
    ClaimEvent.OutputTuple,
    ClaimEvent.OutputObject
  >;
  getEvent(
    key: "FactoryUpdated"
  ): TypedContractEvent<
    FactoryUpdatedEvent.InputTuple,
    FactoryUpdatedEvent.OutputTuple,
    FactoryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated"
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MakeOrder"
  ): TypedContractEvent<
    MakeOrderEvent.InputTuple,
    MakeOrderEvent.OutputTuple,
    MakeOrderEvent.OutputObject
  >;
  getEvent(
    key: "PaymentTokenUpdated"
  ): TypedContractEvent<
    PaymentTokenUpdatedEvent.InputTuple,
    PaymentTokenUpdatedEvent.OutputTuple,
    PaymentTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RecipientUpdated"
  ): TypedContractEvent<
    RecipientUpdatedEvent.InputTuple,
    RecipientUpdatedEvent.OutputTuple,
    RecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "UserOutbid"
  ): TypedContractEvent<
    UserOutbidEvent.InputTuple,
    UserOutbidEvent.OutputTuple,
    UserOutbidEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawOutbid"
  ): TypedContractEvent<
    WithdrawOutbidEvent.InputTuple,
    WithdrawOutbidEvent.OutputTuple,
    WithdrawOutbidEvent.OutputObject
  >;

  filters: {
    "AuctionSettingsUpdated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      AuctionSettingsUpdatedEvent.InputTuple,
      AuctionSettingsUpdatedEvent.OutputTuple,
      AuctionSettingsUpdatedEvent.OutputObject
    >;
    AuctionSettingsUpdated: TypedContractEvent<
      AuctionSettingsUpdatedEvent.InputTuple,
      AuctionSettingsUpdatedEvent.OutputTuple,
      AuctionSettingsUpdatedEvent.OutputObject
    >;

    "Bid(address,uint256,bytes32,address,uint256)": TypedContractEvent<
      BidEvent.InputTuple,
      BidEvent.OutputTuple,
      BidEvent.OutputObject
    >;
    Bid: TypedContractEvent<
      BidEvent.InputTuple,
      BidEvent.OutputTuple,
      BidEvent.OutputObject
    >;

    "CancelOrder(address,uint256,bytes32,address)": TypedContractEvent<
      CancelOrderEvent.InputTuple,
      CancelOrderEvent.OutputTuple,
      CancelOrderEvent.OutputObject
    >;
    CancelOrder: TypedContractEvent<
      CancelOrderEvent.InputTuple,
      CancelOrderEvent.OutputTuple,
      CancelOrderEvent.OutputObject
    >;

    "Claim(address,uint256,bytes32,address,address,uint256)": TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;
    Claim: TypedContractEvent<
      ClaimEvent.InputTuple,
      ClaimEvent.OutputTuple,
      ClaimEvent.OutputObject
    >;

    "FactoryUpdated(address)": TypedContractEvent<
      FactoryUpdatedEvent.InputTuple,
      FactoryUpdatedEvent.OutputTuple,
      FactoryUpdatedEvent.OutputObject
    >;
    FactoryUpdated: TypedContractEvent<
      FactoryUpdatedEvent.InputTuple,
      FactoryUpdatedEvent.OutputTuple,
      FactoryUpdatedEvent.OutputObject
    >;

    "FeesUpdated(uint256,uint256)": TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;

    "MakeOrder(address,uint256,bytes32,address)": TypedContractEvent<
      MakeOrderEvent.InputTuple,
      MakeOrderEvent.OutputTuple,
      MakeOrderEvent.OutputObject
    >;
    MakeOrder: TypedContractEvent<
      MakeOrderEvent.InputTuple,
      MakeOrderEvent.OutputTuple,
      MakeOrderEvent.OutputObject
    >;

    "PaymentTokenUpdated(address)": TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;
    PaymentTokenUpdated: TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;

    "RecipientUpdated(address)": TypedContractEvent<
      RecipientUpdatedEvent.InputTuple,
      RecipientUpdatedEvent.OutputTuple,
      RecipientUpdatedEvent.OutputObject
    >;
    RecipientUpdated: TypedContractEvent<
      RecipientUpdatedEvent.InputTuple,
      RecipientUpdatedEvent.OutputTuple,
      RecipientUpdatedEvent.OutputObject
    >;

    "UserOutbid(address,address,uint256)": TypedContractEvent<
      UserOutbidEvent.InputTuple,
      UserOutbidEvent.OutputTuple,
      UserOutbidEvent.OutputObject
    >;
    UserOutbid: TypedContractEvent<
      UserOutbidEvent.InputTuple,
      UserOutbidEvent.OutputTuple,
      UserOutbidEvent.OutputObject
    >;

    "WithdrawOutbid(address,address,uint256)": TypedContractEvent<
      WithdrawOutbidEvent.InputTuple,
      WithdrawOutbidEvent.OutputTuple,
      WithdrawOutbidEvent.OutputObject
    >;
    WithdrawOutbid: TypedContractEvent<
      WithdrawOutbidEvent.InputTuple,
      WithdrawOutbidEvent.OutputTuple,
      WithdrawOutbidEvent.OutputObject
    >;
  };
}
