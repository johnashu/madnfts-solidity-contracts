/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";

export interface MarketplaceEventsAndErrorsBaseInterface
  extends utils.Interface {
  functions: {};

  events: {
    "AuctionSettingsUpdated(uint256,uint256,uint256,uint256)": EventFragment;
    "FactoryUpdated(address)": EventFragment;
    "FeesUpdated(uint256,uint256)": EventFragment;
    "PaymentTokenUpdated(address)": EventFragment;
    "RecipientUpdated(address)": EventFragment;
    "UserOutbid(address,address,uint256)": EventFragment;
    "WithdrawOutbid(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionSettingsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FactoryUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecipientUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserOutbid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawOutbid"): EventFragment;
}

export interface AuctionSettingsUpdatedEventObject {
  newMinDuration: BigNumber;
  newIncrement: BigNumber;
  newMinBidValue: BigNumber;
  newMaxDuration: BigNumber;
}
export type AuctionSettingsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AuctionSettingsUpdatedEventObject
>;

export type AuctionSettingsUpdatedEventFilter =
  TypedEventFilter<AuctionSettingsUpdatedEvent>;

export interface FactoryUpdatedEventObject {
  newFactory: string;
}
export type FactoryUpdatedEvent = TypedEvent<
  [string],
  FactoryUpdatedEventObject
>;

export type FactoryUpdatedEventFilter = TypedEventFilter<FactoryUpdatedEvent>;

export interface FeesUpdatedEventObject {
  feeVal2: BigNumber;
  feeVal3: BigNumber;
}
export type FeesUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  FeesUpdatedEventObject
>;

export type FeesUpdatedEventFilter = TypedEventFilter<FeesUpdatedEvent>;

export interface PaymentTokenUpdatedEventObject {
  newPaymentToken: string;
}
export type PaymentTokenUpdatedEvent = TypedEvent<
  [string],
  PaymentTokenUpdatedEventObject
>;

export type PaymentTokenUpdatedEventFilter =
  TypedEventFilter<PaymentTokenUpdatedEvent>;

export interface RecipientUpdatedEventObject {
  newRecipient: string;
}
export type RecipientUpdatedEvent = TypedEvent<
  [string],
  RecipientUpdatedEventObject
>;

export type RecipientUpdatedEventFilter =
  TypedEventFilter<RecipientUpdatedEvent>;

export interface UserOutbidEventObject {
  user: string;
  erc20: string;
  amount: BigNumber;
}
export type UserOutbidEvent = TypedEvent<
  [string, string, BigNumber],
  UserOutbidEventObject
>;

export type UserOutbidEventFilter = TypedEventFilter<UserOutbidEvent>;

export interface WithdrawOutbidEventObject {
  user: string;
  erc20: string;
  amount: BigNumber;
}
export type WithdrawOutbidEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawOutbidEventObject
>;

export type WithdrawOutbidEventFilter = TypedEventFilter<WithdrawOutbidEvent>;

export interface MarketplaceEventsAndErrorsBase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketplaceEventsAndErrorsBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "AuctionSettingsUpdated(uint256,uint256,uint256,uint256)"(
      newMinDuration?: PromiseOrValue<BigNumberish> | null,
      newIncrement?: PromiseOrValue<BigNumberish> | null,
      newMinBidValue?: null,
      newMaxDuration?: PromiseOrValue<BigNumberish> | null
    ): AuctionSettingsUpdatedEventFilter;
    AuctionSettingsUpdated(
      newMinDuration?: PromiseOrValue<BigNumberish> | null,
      newIncrement?: PromiseOrValue<BigNumberish> | null,
      newMinBidValue?: null,
      newMaxDuration?: PromiseOrValue<BigNumberish> | null
    ): AuctionSettingsUpdatedEventFilter;

    "FactoryUpdated(address)"(
      newFactory?: PromiseOrValue<string> | null
    ): FactoryUpdatedEventFilter;
    FactoryUpdated(
      newFactory?: PromiseOrValue<string> | null
    ): FactoryUpdatedEventFilter;

    "FeesUpdated(uint256,uint256)"(
      feeVal2?: null,
      feeVal3?: null
    ): FeesUpdatedEventFilter;
    FeesUpdated(feeVal2?: null, feeVal3?: null): FeesUpdatedEventFilter;

    "PaymentTokenUpdated(address)"(
      newPaymentToken?: PromiseOrValue<string> | null
    ): PaymentTokenUpdatedEventFilter;
    PaymentTokenUpdated(
      newPaymentToken?: PromiseOrValue<string> | null
    ): PaymentTokenUpdatedEventFilter;

    "RecipientUpdated(address)"(
      newRecipient?: PromiseOrValue<string> | null
    ): RecipientUpdatedEventFilter;
    RecipientUpdated(
      newRecipient?: PromiseOrValue<string> | null
    ): RecipientUpdatedEventFilter;

    "UserOutbid(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      erc20?: null,
      amount?: null
    ): UserOutbidEventFilter;
    UserOutbid(
      user?: PromiseOrValue<string> | null,
      erc20?: null,
      amount?: null
    ): UserOutbidEventFilter;

    "WithdrawOutbid(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      erc20?: null,
      amount?: null
    ): WithdrawOutbidEventFilter;
    WithdrawOutbid(
      user?: PromiseOrValue<string> | null,
      erc20?: null,
      amount?: null
    ): WithdrawOutbidEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
