/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ERC721Minimal,
  ERC721MinimalInterface,
} from "../../../../../lib/tokens/ERC721/Impl/ERC721Minimal";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "__tokenURI",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "contract SplitterImpl",
        name: "_splitter",
        type: "address",
      },
      {
        internalType: "uint96",
        name: "_fraction",
        type: "uint96",
      },
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyMinted",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidId",
    type: "error",
  },
  {
    inputs: [],
    name: "NotMinted",
    type: "error",
  },
  {
    inputs: [],
    name: "PublicMintOff",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongPrice",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bool",
        name: "newPublicMintState",
        type: "bool",
      },
    ],
    name: "PublicMintStateSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "newRoyaltyFee",
        type: "uint256",
      },
    ],
    name: "RoyaltyFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newRecipient",
        type: "address",
      },
    ],
    name: "RoyaltyRecipientSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "burn",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "publicMint",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "publicMintState",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "salePrice",
        type: "uint256",
      },
    ],
    name: "royaltyInfo",
    outputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "royaltyAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address",
        name: "erc20Owner",
        type: "address",
      },
      {
        internalType: "contract ERC20",
        name: "erc20",
        type: "address",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_publicMintState",
        type: "bool",
      },
    ],
    name: "setPublicMintState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "splitter",
    outputs: [
      {
        internalType: "contract SplitterImpl",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "_uri",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdrawERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260016009553480156200001657600080fd5b506040516200254c3803806200254c833981016040819052620000399162000254565b80878760006200004a8382620003c6565b506001620000598282620003c6565b5050600880546001600160a01b0319166001600160a01b0384169081179091556040519091506000907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a350600c620000b68682620003c6565b50600b849055600a80546001600160a01b0385166001600160a01b031991821681179092556001600160601b03841660068190556007805490921690921790556040517fc36422dcc77a5c93a5c48743078f8130c9fcc2a0ff893904ee62a3565688117c90600090a26007546040516001600160a01b03909116907f2a5a1009e36beb67c3a1ada61dd1343d7e9ec62c70965492fbaa06234f8316b190600090a25050505050505062000492565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200018c57600080fd5b81516001600160401b0380821115620001a957620001a962000164565b604051601f8301601f19908116603f01168101908282118183101715620001d457620001d462000164565b81604052838152602092508683858801011115620001f157600080fd5b600091505b83821015620002155785820183015181830184015290820190620001f6565b600093810190920192909252949350505050565b6001600160a01b03811681146200023f57600080fd5b50565b80516200024f8162000229565b919050565b600080600080600080600060e0888a0312156200027057600080fd5b87516001600160401b03808211156200028857600080fd5b620002968b838c016200017a565b985060208a0151915080821115620002ad57600080fd5b620002bb8b838c016200017a565b975060408a0151915080821115620002d257600080fd5b50620002e18a828b016200017a565b955050606088015193506080880151620002fb8162000229565b60a08901519093506001600160601b03811681146200031957600080fd5b91506200032960c0890162000242565b905092959891949750929550565b600181811c908216806200034c57607f821691505b6020821081036200036d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003c157600081815260208120601f850160051c810160208610156200039c5750805b601f850160051c820191505b81811015620003bd57828155600101620003a8565b5050505b505050565b81516001600160401b03811115620003e257620003e262000164565b620003fa81620003f3845462000337565b8462000373565b602080601f831160018114620004325760008415620004195750858301515b600019600386901b1c1916600185901b178555620003bd565b600085815260208120601f198616915b82811015620004635788860151825594840194600190910190840162000442565b5085821015620004825787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6120aa80620004a26000396000f3fe6080604052600436106101a15760003560e01c806344df8e70116100e157806395d89b411161008a578063b88d4fde11610064578063b88d4fde146104a1578063c87b56dd146104c1578063e985e9c5146104e1578063f4f3b2001461051c57600080fd5b806395d89b4114610456578063a035b1fe1461046b578063a22cb4651461048157600080fd5b806370a08231116100bb57806370a08231146103e8578063879fbedf146104165780638da5cb5b1461043657600080fd5b806344df8e70146103ad5780634df68d28146103b55780636352211e146103c857600080fd5b806322ab47a11161014e5780632a55205a116101285780632a55205a146103195780633ccfd60b146103585780633cd8045e1461036d57806342842e0e1461038d57600080fd5b806322ab47a1146102d257806323b872dd146102f157806326092b831461031157600080fd5b8063095ea7b31161017f578063095ea7b31461024b57806313af40351461026d578063150b7a021461028d57600080fd5b806301ffc9a7146101a657806306fdde03146101db578063081812fc146101fd575b600080fd5b3480156101b257600080fd5b506101c66101c1366004611c7b565b61053c565b60405190151581526020015b60405180910390f35b3480156101e757600080fd5b506101f06105a9565b6040516101d29190611c9f565b34801561020957600080fd5b50610233610218366004611ced565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101d2565b34801561025757600080fd5b5061026b610266366004611d1b565b610637565b005b34801561027957600080fd5b5061026b610288366004611d47565b61071e565b34801561029957600080fd5b506102b96102a8366004611d64565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020016101d2565b3480156102de57600080fd5b50600d546101c690610100900460ff1681565b3480156102fd57600080fd5b5061026b61030c366004611e03565b6107b3565b61026b610999565b34801561032557600080fd5b50610339610334366004611e44565b610a80565b604080516001600160a01b0390931683526020830191909152016101d2565b34801561036457600080fd5b5061026b610ab6565b34801561037957600080fd5b50600a54610233906001600160a01b031681565b34801561039957600080fd5b5061026b6103a8366004611e03565b610db8565b61026b610eb0565b61026b6103c3366004611e66565b610f16565b3480156103d457600080fd5b506102336103e3366004611ced565b611058565b3480156103f457600080fd5b50610408610403366004611d47565b6110af565b6040519081526020016101d2565b34801561042257600080fd5b5061026b610431366004611ec1565b611123565b34801561044257600080fd5b50600854610233906001600160a01b031681565b34801561046257600080fd5b506101f06111b1565b34801561047757600080fd5b50610408600b5481565b34801561048d57600080fd5b5061026b61049c366004611edc565b6111be565b3480156104ad57600080fd5b5061026b6104bc366004611d64565b61122a565b3480156104cd57600080fd5b506101f06104dc366004611ced565b611312565b3480156104ed57600080fd5b506101c66104fc366004611f08565b600560209081526000928352604080842090915290825290205460ff1681565b34801561052857600080fd5b5061026b610537366004611d47565b6113ea565b60006301ffc9a760e01b6001600160e01b03198316148061056d57506380ac58cd60e01b6001600160e01b03198316145b806105885750635b5e139f60e01b6001600160e01b03198316145b806105a3575063152a902d60e11b6001600160e01b03198316145b92915050565b600080546105b690611f41565b80601f01602080910402602001604051908101604052809291908181526020018280546105e290611f41565b801561062f5780601f106106045761010080835404028352916020019161062f565b820191906000526020600020905b81548152906001019060200180831161061257829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b03163381148061068057506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b6106c25760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6008546001600160a01b031633146107675760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106b9565b600880546001600160a01b0319166001600160a01b03831690811790915560405133907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a350565b6000818152600260205260409020546001600160a01b0384811691161461081c5760405162461bcd60e51b815260206004820152600a60248201527f57524f4e475f46524f4d0000000000000000000000000000000000000000000060448201526064016106b9565b6001600160a01b0382166108725760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f524543495049454e5400000000000000000000000000000060448201526064016106b9565b336001600160a01b03841614806108ac57506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b806108cd57506000818152600460205260409020546001600160a01b031633145b61090a5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064016106b9565b6001600160a01b0380841660008181526003602090815260408083208054600019019055938616808352848320805460010190558583526002825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6009546001146109eb5760405162461bcd60e51b815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064016106b9565b6002600955600d54610100900460ff16610a185760405163287588a160e11b815260040160405180910390fd5b600b543414610a3a5760405163f7760f2560e01b815260040160405180910390fd5b600d5460ff1615610a5e57604051631bbdf5c560e31b815260040160405180910390fd5b600d805460ff19166001908117909155610a7990339061175f565b6001600955565b6007546006546001600160a01b039091169060009061271090610aa39085611f7b565b610aad9190611fa8565b90509250929050565b6008546001600160a01b03163314610aff5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106b9565b600a546040805163e919ecad60e01b815290516000926001600160a01b03169163e919ecad9160048083019260209291908290030181865afa158015610b49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6d9190611fca565b905060008167ffffffffffffffff811115610b8a57610b8a611fe3565b604051908082528060200260200182016040528015610bb3578160200160208202803683370190505b50905060008267ffffffffffffffff811115610bd157610bd1611fe3565b604051908082528060200260200182016040528015610bfa578160200160208202803683370190505b5090504760005b84811015610d6157600a54604051631419245f60e11b8152600481018390526000916001600160a01b03169063283248be90602401602060405180830381865afa158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c779190611ff9565b600a5460405163b34c8caf60e01b81526001600160a01b0380841660048301529293506000929091169063b34c8caf90602401602060405180830381865afa158015610cc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ceb9190611fca565b905081868481518110610d0057610d00612016565b6001600160a01b0390921660209283029190910190910152612710610d26826064611f7b565b610d309086611f7b565b610d3a9190611fa8565b858481518110610d4c57610d4c612016565b60209081029190910101525050600101610c01565b60005b85811015610db057610da8858281518110610d8157610d81612016565b6020026020010151858381518110610d9b57610d9b612016565b6020026020010151611852565b600101610d64565b505050505050565b610dc38383836107b3565b6001600160a01b0382163b1580610e6c5750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015610e3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e60919061202c565b6001600160e01b031916145b610eab5760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b60448201526064016106b9565b505050565b6008546001600160a01b03163314610ef95760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106b9565b610f0a63044df8e760e41b346118ad565b610f14600161195d565b565b6008546001600160a01b03163314610f5f5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106b9565b60006001600160a01b038216610f755734610fe5565b604051636eb1769f60e11b81526001600160a01b03848116600483015230602483015283169063dd62ed3e90604401602060405180830381865afa158015610fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe59190611fca565b9050610ff86340d097c360e01b826118ad565b600d5460ff161561101c57604051631bbdf5c560e31b815260040160405180910390fd5b6001600160a01b038216156110375761103782843084611a2a565b600d805460ff1916600190811790915561105290859061175f565b50505050565b6000818152600260205260409020546001600160a01b0316806110aa5760405162461bcd60e51b815260206004820152600a6024820152691393d517d3525395115160b21b60448201526064016106b9565b919050565b60006001600160a01b0382166111075760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f41444452455353000000000000000000000000000000000000000060448201526064016106b9565b506001600160a01b031660009081526003602052604090205490565b6008546001600160a01b0316331461116c5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106b9565b600d805461ff001916610100831515908102919091179091556040517f2f3b349e2956d565a50532dcc875a49be7f558411642122cf5e50ca9b4bb14e690600090a250565b600180546105b690611f41565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6112358585856107b3565b6001600160a01b0384163b15806112cc5750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a029061127d9033908a90899089908990600401612049565b6020604051808303816000875af115801561129c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c0919061202c565b6001600160e01b031916145b61130b5760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b60448201526064016106b9565b5050505050565b60608160011461133557604051631bf4348160e31b815260040160405180910390fd5b600d5460ff1661135857604051634d5e5fb360e01b815260040160405180910390fd5b600c805461136590611f41565b80601f016020809104026020016040519081016040528092919081815260200182805461139190611f41565b80156113de5780601f106113b3576101008083540402835291602001916113de565b820191906000526020600020905b8154815290600101906020018083116113c157829003601f168201915b50505050509050919050565b6008546001600160a01b031633146114335760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016106b9565b600a546040805163e919ecad60e01b815290516000926001600160a01b03169163e919ecad9160048083019260209291908290030181865afa15801561147d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a19190611fca565b905060008167ffffffffffffffff8111156114be576114be611fe3565b6040519080825280602002602001820160405280156114e7578160200160208202803683370190505b50905060008267ffffffffffffffff81111561150557611505611fe3565b60405190808252806020026020018201604052801561152e578160200160208202803683370190505b506040516370a0823160e01b815230600482015290915060009081906001600160a01b038716906370a0823190602401602060405180830381865afa15801561157b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159f9190611fca565b90505b8482101561170657600a54604051631419245f60e11b8152600481018490526000916001600160a01b03169063283248be90602401602060405180830381865afa1580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116189190611ff9565b600a5460405163b34c8caf60e01b81526001600160a01b0380841660048301529293506000929091169063b34c8caf90602401602060405180830381865afa158015611668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168c9190611fca565b9050818685815181106116a1576116a1612016565b6001600160a01b03909216602092830291909101909101526127106116c7826064611f7b565b6116d19085611f7b565b6116db9190611fa8565b8585815181106116ed576116ed612016565b60200260200101818152505083600101935050506115a2565b60005b858110156117565761174e8786838151811061172757611727612016565b602002602001015186848151811061174157611741612016565b6020026020010151611ab6565b600101611709565b50505050505050565b6117698282611b3c565b6001600160a01b0382163b158061180f5750604051630a85bd0160e11b80825233600483015260006024830181905260448301849052608060648401526084830152906001600160a01b0384169063150b7a029060a4016020604051808303816000875af11580156117df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611803919061202c565b6001600160e01b031916145b61184e5760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b60448201526064016106b9565b5050565b600080600080600085875af1905080610eab5760405162461bcd60e51b815260206004820152601360248201527f4554485f5452414e534645525f4641494c45440000000000000000000000000060448201526064016106b9565b6008546001600160a01b0316803b63ffffffff81166000036118cf5750505050565b600854604051633b7279e960e21b81526001600160e01b0319861660048201526000916001600160a01b03169063edc9e7a490602401602060405180830381865afa158015611922573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119469190611fca565b905080841461130b5763f7760f256000526004601cfd5b6000818152600260205260409020546001600160a01b0316806119af5760405162461bcd60e51b815260206004820152600a6024820152691393d517d3525395115160b21b60448201526064016106b9565b6001600160a01b038116600081815260036020908152604080832080546000190190558583526002825280832080546001600160a01b031990811690915560049092528083208054909216909155518492907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d116001600051141617169150508061130b5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c454400000000000000000000000060448201526064016106b9565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806110525760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c4544000000000000000000000000000000000060448201526064016106b9565b6001600160a01b038216611b925760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f524543495049454e5400000000000000000000000000000060448201526064016106b9565b6000818152600260205260409020546001600160a01b031615611bf75760405162461bcd60e51b815260206004820152600e60248201527f414c52454144595f4d494e54454400000000000000000000000000000000000060448201526064016106b9565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160e01b031981168114611c7857600080fd5b50565b600060208284031215611c8d57600080fd5b8135611c9881611c62565b9392505050565b600060208083528351808285015260005b81811015611ccc57858101830151858201604001528201611cb0565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215611cff57600080fd5b5035919050565b6001600160a01b0381168114611c7857600080fd5b60008060408385031215611d2e57600080fd5b8235611d3981611d06565b946020939093013593505050565b600060208284031215611d5957600080fd5b8135611c9881611d06565b600080600080600060808688031215611d7c57600080fd5b8535611d8781611d06565b94506020860135611d9781611d06565b935060408601359250606086013567ffffffffffffffff80821115611dbb57600080fd5b818801915088601f830112611dcf57600080fd5b813581811115611dde57600080fd5b896020828501011115611df057600080fd5b9699959850939650602001949392505050565b600080600060608486031215611e1857600080fd5b8335611e2381611d06565b92506020840135611e3381611d06565b929592945050506040919091013590565b60008060408385031215611e5757600080fd5b50508035926020909101359150565b600080600060608486031215611e7b57600080fd5b8335611e8681611d06565b92506020840135611e9681611d06565b91506040840135611ea681611d06565b809150509250925092565b803580151581146110aa57600080fd5b600060208284031215611ed357600080fd5b611c9882611eb1565b60008060408385031215611eef57600080fd5b8235611efa81611d06565b9150610aad60208401611eb1565b60008060408385031215611f1b57600080fd5b8235611f2681611d06565b91506020830135611f3681611d06565b809150509250929050565b600181811c90821680611f5557607f821691505b602082108103611f7557634e487b7160e01b600052602260045260246000fd5b50919050565b6000816000190483118215151615611fa357634e487b7160e01b600052601160045260246000fd5b500290565b600082611fc557634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215611fdc57600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561200b57600080fd5b8151611c9881611d06565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561203e57600080fd5b8151611c9881611c62565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f8501168301019050969550505050505056fea164736f6c6343000810000a";

type ERC721MinimalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721MinimalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721Minimal__factory extends ContractFactory {
  constructor(...args: ERC721MinimalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    __tokenURI: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    _splitter: PromiseOrValue<string>,
    _fraction: PromiseOrValue<BigNumberish>,
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721Minimal> {
    return super.deploy(
      _name,
      _symbol,
      __tokenURI,
      _price,
      _splitter,
      _fraction,
      _router,
      overrides || {}
    ) as Promise<ERC721Minimal>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    __tokenURI: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    _splitter: PromiseOrValue<string>,
    _fraction: PromiseOrValue<BigNumberish>,
    _router: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      __tokenURI,
      _price,
      _splitter,
      _fraction,
      _router,
      overrides || {}
    );
  }
  override attach(address: string): ERC721Minimal {
    return super.attach(address) as ERC721Minimal;
  }
  override connect(signer: Signer): ERC721Minimal__factory {
    return super.connect(signer) as ERC721Minimal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721MinimalInterface {
    return new utils.Interface(_abi) as ERC721MinimalInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721Minimal {
    return new Contract(address, _abi, signerOrProvider) as ERC721Minimal;
  }
}
