/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ERC721Lazy,
  ERC721LazyInterface,
} from "../../../../../lib/tokens/ERC721/Impl/ERC721Lazy";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "_baseURI",
        type: "string",
      },
      {
        internalType: "contract SplitterImpl",
        name: "_splitter",
        type: "address",
      },
      {
        internalType: "uint96",
        name: "_fraction",
        type: "uint96",
      },
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        internalType: "contract ERC20",
        name: "_erc20",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidSigner",
    type: "error",
  },
  {
    inputs: [],
    name: "NotMintedYet",
    type: "error",
  },
  {
    inputs: [],
    name: "UsedVoucher",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongPrice",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "newBaseURI",
        type: "string",
      },
    ],
    name: "BaseURISet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "newRoyaltyFee",
        type: "uint256",
      },
    ],
    name: "RoyaltyFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newRecipient",
        type: "address",
      },
    ],
    name: "RoyaltyRecipientSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newSigner",
        type: "address",
      },
    ],
    name: "SignerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "voucherId",
            type: "bytes32",
          },
          {
            internalType: "address[]",
            name: "users",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "balances",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        internalType: "struct Types.Voucher",
        name: "_voucher",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "_verify",
    outputs: [
      {
        internalType: "address",
        name: "recovered",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "voucherId",
            type: "bytes32",
          },
          {
            internalType: "address[]",
            name: "users",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "balances",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        internalType: "struct Types.Voucher",
        name: "_voucher",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "_verifyVoucher",
    outputs: [
      {
        internalType: "address",
        name: "recovered",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "erc20Owner",
        type: "address",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "erc20",
    outputs: [
      {
        internalType: "contract ERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBaseURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMintCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "voucherId",
            type: "bytes32",
          },
          {
            internalType: "address[]",
            name: "users",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "balances",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        internalType: "struct Types.Voucher",
        name: "voucher",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "lazyMint",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "voucherId",
            type: "bytes32",
          },
          {
            internalType: "address[]",
            name: "users",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "balances",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        internalType: "struct Types.Voucher",
        name: "voucher",
        type: "tuple",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "erc20Owner",
        type: "address",
      },
    ],
    name: "lazyMint",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "salePrice",
        type: "uint256",
      },
    ],
    name: "royaltyInfo",
    outputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "royaltyAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_baseURI",
        type: "string",
      },
    ],
    name: "setBaseURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
    ],
    name: "setSigner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "signer",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "splitter",
    outputs: [
      {
        internalType: "contract SplitterImpl",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "usedVouchers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdrawERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405260016009553480156200001657600080fd5b50604051620034463803806200344683398101604081905262000039916200035c565b82888860006200004a8382620004da565b506001620000598282620004da565b5050600880546001600160a01b0319166001600160a01b0384169081179091556040519091506000907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a35046608052620000b6620001c6565b60a052600a80546001600160a01b0319166001600160a01b038416179055600c620000e28782620004da565b50600d80546001600160a01b03199081166001600160a01b038881169182179093556010805483168585161790556001600160601b03871660065560078054909216179055604051908316907f5553331329228fbd4123164423717a4a7539f6dfa1c3279a923b98fd681a6c7390600090a26006546040517fc36422dcc77a5c93a5c48743078f8130c9fcc2a0ff893904ee62a3565688117c90600090a26007546040516001600160a01b03909116907f2a5a1009e36beb67c3a1ada61dd1343d7e9ec62c70965492fbaa06234f8316b190600090a2505050505050505062000624565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6000604051620001fa9190620005a6565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200028a57600080fd5b81516001600160401b0380821115620002a757620002a762000262565b604051601f8301601f19908116603f01168101908282118183101715620002d257620002d262000262565b81604052838152602092508683858801011115620002ef57600080fd5b600091505b83821015620003135785820183015181830184015290820190620002f4565b600093810190920192909252949350505050565b80516001600160a01b03811681146200033f57600080fd5b919050565b80516001600160601b03811681146200033f57600080fd5b600080600080600080600080610100898b0312156200037a57600080fd5b88516001600160401b03808211156200039257600080fd5b620003a08c838d0162000278565b995060208b0151915080821115620003b757600080fd5b620003c58c838d0162000278565b985060408b0151915080821115620003dc57600080fd5b50620003eb8b828c0162000278565b965050620003fc60608a0162000327565b94506200040c60808a0162000344565b93506200041c60a08a0162000327565b92506200042c60c08a0162000327565b91506200043c60e08a0162000327565b90509295985092959890939650565b600181811c908216806200046057607f821691505b6020821081036200048157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004d557600081815260208120601f850160051c81016020861015620004b05750805b601f850160051c820191505b81811015620004d157828155600101620004bc565b5050505b505050565b81516001600160401b03811115620004f657620004f662000262565b6200050e816200050784546200044b565b8462000487565b602080601f8311600181146200054657600084156200052d5750858301515b600019600386901b1c1916600185901b178555620004d1565b600085815260208120601f198616915b82811015620005775788860151825594840194600190910190840162000556565b5085821015620005965787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000808354620005b6816200044b565b60018281168015620005d15760018114620005e75762000618565b60ff198416875282151583028701945062000618565b8760005260208060002060005b858110156200060f5781548a820152908401908201620005f4565b50505082870194505b50929695505050505050565b60805160a051612dfc6200064a6000396000610fee01526000610fbe0152612dfc6000f3fe6080604052600436106102345760003560e01c806355f804b31161013857806395d89b41116100b0578063bfa556e41161007f578063d29bb90711610064578063d29bb90714610300578063e985e9c51461066c578063f4f3b200146106a757600080fd5b8063bfa556e41461061c578063c87b56dd1461064c57600080fd5b806395d89b41146105b4578063a22cb465146105c9578063b80f55c9146105e9578063b88d4fde146105fc57600080fd5b806370a0823111610107578063785e9e86116100ec578063785e9e861461055f5780638da5cb5b1461057f5780638fc3b5491461059f57600080fd5b806370a082311461052a578063714c53981461054a57600080fd5b806355f804b3146104b75780636352211e146104d757806368ab30f3146104f75780636c19e7831461050a57600080fd5b806318160ddd116101cb578063362c0cb51161019a5780633ccfd60b1161017f5780633ccfd60b146104625780633cd8045e1461047757806342842e0e1461049757600080fd5b8063362c0cb51461043a5780633644e5151461044d57600080fd5b806318160ddd14610398578063238ac933146103bb57806323b872dd146103db5780632a55205a146103fb57600080fd5b80630f16a080116102075780630f16a0801461030057806310251d7f1461032057806313af403514610333578063150b7a021461035357600080fd5b806301ffc9a71461023957806306fdde031461026e578063081812fc14610290578063095ea7b3146102de575b600080fd5b34801561024557600080fd5b50610259610254366004612495565b6106c7565b60405190151581526020015b60405180910390f35b34801561027a57600080fd5b50610283610734565b60405161026591906124dd565b34801561029c57600080fd5b506102c66102ab366004612510565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610265565b3480156102ea57600080fd5b506102fe6102f936600461253e565b6107c2565b005b34801561030c57600080fd5b506102c661031b366004612593565b6108a9565b6102fe61032e366004612593565b610a27565b34801561033f57600080fd5b506102fe61034e3660046125f0565b610b5b565b34801561035f57600080fd5b5061037f61036e36600461260d565b630a85bd0160e11b95945050505050565b6040516001600160e01b03199091168152602001610265565b3480156103a457600080fd5b506103ad610bf0565b604051908152602001610265565b3480156103c757600080fd5b50600a546102c6906001600160a01b031681565b3480156103e757600080fd5b506102fe6103f63660046126ac565b610c00565b34801561040757600080fd5b5061041b6104163660046126ed565b610de6565b604080516001600160a01b039093168352602083019190915201610265565b6102fe6104483660046127d6565b610e1c565b34801561045957600080fd5b506103ad610fba565b34801561046e57600080fd5b506102fe611010565b34801561048357600080fd5b50600d546102c6906001600160a01b031681565b3480156104a357600080fd5b506102fe6104b23660046126ac565b611312565b3480156104c357600080fd5b506102fe6104d2366004612828565b61140a565b3480156104e357600080fd5b506102c66104f2366004612510565b6114a1565b6102fe6105053660046128bd565b6114f8565b34801561051657600080fd5b506102fe6105253660046125f0565b611695565b34801561053657600080fd5b506103ad6105453660046125f0565b611728565b34801561055657600080fd5b5061028361179c565b34801561056b57600080fd5b506010546102c6906001600160a01b031681565b34801561058b57600080fd5b506008546102c6906001600160a01b031681565b3480156105ab57600080fd5b50600f546103ad565b3480156105c057600080fd5b5061028361182e565b3480156105d557600080fd5b506102fe6105e4366004612933565b61183b565b6102fe6105f7366004612966565b6118a7565b34801561060857600080fd5b506102fe61061736600461260d565b6119a3565b34801561062857600080fd5b50610259610637366004612510565b600e6020526000908152604090205460ff1681565b34801561065857600080fd5b50610283610667366004612510565b611a84565b34801561067857600080fd5b506102596106873660046129a3565b600560209081526000928352604080842090915290825290205460ff1681565b3480156106b357600080fd5b506102fe6106c23660046125f0565b611adb565b60006301ffc9a760e01b6001600160e01b0319831614806106f857506380ac58cd60e01b6001600160e01b03198316145b806107135750635b5e139f60e01b6001600160e01b03198316145b8061072e575063152a902d60e11b6001600160e01b03198316145b92915050565b60008054610741906129d1565b80601f016020809104026020016040519081016040528092919081815260200182805461076d906129d1565b80156107ba5780601f1061078f576101008083540402835291602001916107ba565b820191906000526020600020905b81548152906001019060200180831161079d57829003601f168201915b505050505081565b6000818152600260205260409020546001600160a01b03163381148061080b57506001600160a01b038116600090815260056020908152604080832033845290915290205460ff165b61084d5760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b60448201526064015b60405180910390fd5b60008281526004602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b600060016108b5610fba565b7f7562780e3e1258910f178c30fecd6ae3b924da6aa34235bd88bd8bb8276c7c6987356108e560208a018a612a05565b6040516020016108f6929190612a56565b6040516020818303038152906040528051906020012089806040019061091c9190612a05565b60405160200161092d929190612a98565b60408051601f1981840301815282825280516020918201209083019590955281019290925260608083019190915260808083019390935289013560a08201529088013560c082015260e001604051602081830303815290604052805190602001206040516020016109b592919061190160f01b81526002810192909252602282015260420190565b60408051601f198184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610a13573d6000803e3d6000fd5b5050604051601f1901519695505050505050565b600954600114610a665760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b6044820152606401610844565b60026009556010546001600160a01b031615610ab35760405162461bcd60e51b815260206004820152600c60248201526b494e56414c49445f5459504560a01b6044820152606401610844565b6000610ac1858585856108a9565b9050610ace818634611e50565b84356000908152600e602090815260408220805460ff19166001179055610af790870187612a05565b9050905060005b81811015610b4d57610b456060880135610b1b60208a018a612a05565b84818110610b2b57610b2b612ada565b9050602002016020810190610b4091906125f0565b611efa565b600101610afe565b505060016009555050505050565b6008546001600160a01b03163314610ba45760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610844565b600880546001600160a01b0319166001600160a01b03831690811790915560405133907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a350565b6000610bfb600b5490565b905090565b6000818152600260205260409020546001600160a01b03848116911614610c695760405162461bcd60e51b815260206004820152600a60248201527f57524f4e475f46524f4d000000000000000000000000000000000000000000006044820152606401610844565b6001600160a01b038216610cbf5760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f524543495049454e540000000000000000000000000000006044820152606401610844565b336001600160a01b0384161480610cf957506001600160a01b038316600090815260056020908152604080832033845290915290205460ff165b80610d1a57506000818152600460205260409020546001600160a01b031633145b610d575760405162461bcd60e51b815260206004820152600e60248201526d1393d517d055551213d49256915160921b6044820152606401610844565b6001600160a01b0380841660008181526003602090815260408083208054600019019055938616808352848320805460010190558583526002825284832080546001600160a01b03199081168317909155600490925284832080549092169091559251849392917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6007546006546001600160a01b039091169060009061271090610e099085612b06565b610e139190612b25565b90509250929050565b6008546001600160a01b03163314610e655760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610844565b6010546001600160a01b0316610eac5760405162461bcd60e51b815260206004820152600c60248201526b494e56414c49445f5459504560a01b6044820152606401610844565b601054604051636eb1769f60e11b81526001600160a01b038381166004830152306024830152600092169063dd62ed3e90604401602060405180830381865afa158015610efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f219190612b47565b9050610f3463044df8e760e41b82611f1e565b601054610f4c906001600160a01b0316833084611fce565b82516000905b80821015610f9157610f64600b61205a565b610f86858381518110610f7957610f79612ada565b6020026020010151612077565b816001019150610f52565b80821015610fb3576c4c4f4f505f4f564552464c4f5760981b60005260206000fd5b5050505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614610feb57610bfb612144565b507f000000000000000000000000000000000000000000000000000000000000000090565b6008546001600160a01b031633146110595760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610844565b600d546040805163e919ecad60e01b815290516000926001600160a01b03169163e919ecad9160048083019260209291908290030181865afa1580156110a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c79190612b47565b905060008167ffffffffffffffff8111156110e4576110e461270f565b60405190808252806020026020018201604052801561110d578160200160208202803683370190505b50905060008267ffffffffffffffff81111561112b5761112b61270f565b604051908082528060200260200182016040528015611154578160200160208202803683370190505b5090504760005b848110156112bb57600d54604051631419245f60e11b8152600481018390526000916001600160a01b03169063283248be90602401602060405180830381865afa1580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d19190612b60565b600d5460405163b34c8caf60e01b81526001600160a01b0380841660048301529293506000929091169063b34c8caf90602401602060405180830381865afa158015611221573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112459190612b47565b90508186848151811061125a5761125a612ada565b6001600160a01b0390921660209283029190910190910152612710611280826064612b06565b61128a9086612b06565b6112949190612b25565b8584815181106112a6576112a6612ada565b6020908102919091010152505060010161115b565b60005b8581101561130a576113028582815181106112db576112db612ada565b60200260200101518583815181106112f5576112f5612ada565b60200260200101516121de565b6001016112be565b505050505050565b61131d838383610c00565b6001600160a01b0382163b15806113c65750604051630a85bd0160e11b8082523360048301526001600160a01b03858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015611396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ba9190612b7d565b6001600160e01b031916145b6114055760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b6044820152606401610844565b505050565b6008546001600160a01b031633146114535760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610844565b600c61145f8282612be0565b508060405161146e9190612ca0565b604051908190038120907ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f690600090a250565b6000818152600260205260409020546001600160a01b0316806114f35760405162461bcd60e51b815260206004820152600a6024820152691393d517d3525395115160b21b6044820152606401610844565b919050565b6009546001146115375760405162461bcd60e51b815260206004820152600a6024820152695245454e5452414e435960b01b6044820152606401610844565b60026009556010546001600160a01b03166115835760405162461bcd60e51b815260206004820152600c60248201526b494e56414c49445f5459504560a01b6044820152606401610844565b6000611591868686866108a9565b601054604051636eb1769f60e11b81526001600160a01b0385811660048301523060248301529293506000929091169063dd62ed3e90604401602060405180830381865afa1580156115e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160b9190612b47565b9050611618828883611e50565b601054611630906001600160a01b0316843084611fce565b86356000908152600e602090815260408220805460ff1916600117905561165990890189612a05565b9050905060005b818110156116855761167d60608a0135610b1b60208c018c612a05565b600101611660565b5050600160095550505050505050565b6008546001600160a01b031633146116de5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610844565b600a80546001600160a01b0319166001600160a01b0383169081179091556040517f5553331329228fbd4123164423717a4a7539f6dfa1c3279a923b98fd681a6c7390600090a250565b60006001600160a01b0382166117805760405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152606401610844565b506001600160a01b031660009081526003602052604090205490565b6060600c80546117ab906129d1565b80601f01602080910402602001604051908101604052809291908181526020018280546117d7906129d1565b80156118245780601f106117f957610100808354040283529160200191611824565b820191906000526020600020905b81548152906001019060200180831161180757829003601f168201915b5050505050905090565b60018054610741906129d1565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6008546001600160a01b031633146118f05760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610844565b6010546001600160a01b0316156119385760405162461bcd60e51b815260206004820152600c60248201526b494e56414c49445f5459504560a01b6044820152606401610844565b61194963044df8e760e41b34611f1e565b80516000905b8082101561198157611961600b61205a565b611976838381518110610f7957610f79612ada565b81600101915061194f565b80821015611405576c4c4f4f505f4f564552464c4f5760981b60005260206000fd5b6119ae858585610c00565b6001600160a01b0384163b1580611a455750604051630a85bd0160e11b808252906001600160a01b0386169063150b7a02906119f69033908a90899089908990600401612cbc565b6020604051808303816000875af1158015611a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a399190612b7d565b6001600160e01b031916145b610fb35760405162461bcd60e51b815260206004820152601060248201526f155394d0519157d49150d2541251539560821b6044820152606401610844565b6060600f54821115611aa957604051635d68437560e11b815260040160405180910390fd5b600c611ab483612239565b604051602001611ac5929190612d83565b6040516020818303038152906040529050919050565b6008546001600160a01b03163314611b245760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b6044820152606401610844565b600d546040805163e919ecad60e01b815290516000926001600160a01b03169163e919ecad9160048083019260209291908290030181865afa158015611b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b929190612b47565b905060008167ffffffffffffffff811115611baf57611baf61270f565b604051908082528060200260200182016040528015611bd8578160200160208202803683370190505b50905060008267ffffffffffffffff811115611bf657611bf661270f565b604051908082528060200260200182016040528015611c1f578160200160208202803683370190505b506040516370a0823160e01b815230600482015290915060009081906001600160a01b038716906370a0823190602401602060405180830381865afa158015611c6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c909190612b47565b90505b84821015611df757600d54604051631419245f60e11b8152600481018490526000916001600160a01b03169063283248be90602401602060405180830381865afa158015611ce5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d099190612b60565b600d5460405163b34c8caf60e01b81526001600160a01b0380841660048301529293506000929091169063b34c8caf90602401602060405180830381865afa158015611d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7d9190612b47565b905081868581518110611d9257611d92612ada565b6001600160a01b0390921660209283029190910190910152612710611db8826064612b06565b611dc29085612b06565b611dcc9190612b25565b858581518110611dde57611dde612ada565b6020026020010181815250508360010193505050611c93565b60005b85811015611e4757611e3f87868381518110611e1857611e18612ada565b6020026020010151868481518110611e3257611e32612ada565b6020026020010151612288565b600101611dfa565b50505050505050565b600a546001600160a01b03848116911614611e7e57604051632057875960e21b815260040160405180910390fd5b81356000908152600e602052604090205460ff1615611eb05760405163e647f41360e01b815260040160405180910390fd5b611ebd6020830183612a05565b9050611ed160608401356080850135612b06565b611edb9190612b06565b81146114055760405163f7760f2560e01b815260040160405180910390fd5b60005b8281101561140557611f1682611f11612314565b61233f565b600101611efd565b6008546001600160a01b0316803b63ffffffff8116600003611f405750505050565b600854604051633b7279e960e21b81526001600160e01b0319861660048201526000916001600160a01b03169063edc9e7a490602401602060405180830381865afa158015611f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb79190612b47565b9050808414610fb35763f7760f256000526004601cfd5b60006040516323b872dd60e01b81528460048201528360248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080610fb35760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610844565b80548061206f5763ce3a3d376000526004601cfd5b600019019055565b6000818152600260205260409020546001600160a01b0316806120c95760405162461bcd60e51b815260206004820152600a6024820152691393d517d3525395115160b21b6044820152606401610844565b6001600160a01b038116600081815260036020908152604080832080546000190190558583526002825280832080546001600160a01b031990811690915560049092528083208054909216909155518492907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516121769190612dd0565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b600080600080600085875af19050806114055760405162461bcd60e51b815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152606401610844565b604080516080810191829052607f0190826030600a8206018353600a90045b801561227657600183039250600a81066030018353600a9004612258565b50819003601f19909101908152919050565b600060405163a9059cbb60e01b8152836004820152826024820152602060006044836000895af13d15601f3d116001600051141617169150508061230e5760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610844565b50505050565b600061231e612465565b506001600f60008282546123329190612ddc565b9091555050600f54919050565b6001600160a01b0382166123955760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f524543495049454e540000000000000000000000000000006044820152606401610844565b6000818152600260205260409020546001600160a01b0316156123fa5760405162461bcd60e51b815260206004820152600e60248201527f414c52454144595f4d494e5445440000000000000000000000000000000000006044820152606401610844565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000612475600b80546001019055565b50600b5490565b6001600160e01b03198116811461249257600080fd5b50565b6000602082840312156124a757600080fd5b81356124b28161247c565b9392505050565b60005b838110156124d45781810151838201526020016124bc565b50506000910152565b60208152600082518060208401526124fc8160408501602087016124b9565b601f01601f19169190910160400192915050565b60006020828403121561252257600080fd5b5035919050565b6001600160a01b038116811461249257600080fd5b6000806040838503121561255157600080fd5b823561255c81612529565b946020939093013593505050565b600060a0828403121561257c57600080fd5b50919050565b803560ff811681146114f357600080fd5b600080600080608085870312156125a957600080fd5b843567ffffffffffffffff8111156125c057600080fd5b6125cc8782880161256a565b9450506125db60208601612582565b93969395505050506040820135916060013590565b60006020828403121561260257600080fd5b81356124b281612529565b60008060008060006080868803121561262557600080fd5b853561263081612529565b9450602086013561264081612529565b935060408601359250606086013567ffffffffffffffff8082111561266457600080fd5b818801915088601f83011261267857600080fd5b81358181111561268757600080fd5b89602082850101111561269957600080fd5b9699959850939650602001949392505050565b6000806000606084860312156126c157600080fd5b83356126cc81612529565b925060208401356126dc81612529565b929592945050506040919091013590565b6000806040838503121561270057600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561274e5761274e61270f565b604052919050565b600082601f83011261276757600080fd5b8135602067ffffffffffffffff8211156127835761278361270f565b8160051b612792828201612725565b92835284810182019282810190878511156127ac57600080fd5b83870192505b848310156127cb578235825291830191908301906127b2565b979650505050505050565b600080604083850312156127e957600080fd5b823567ffffffffffffffff81111561280057600080fd5b61280c85828601612756565b925050602083013561281d81612529565b809150509250929050565b6000602080838503121561283b57600080fd5b823567ffffffffffffffff8082111561285357600080fd5b818501915085601f83011261286757600080fd5b8135818111156128795761287961270f565b61288b601f8201601f19168501612725565b915080825286848285010111156128a157600080fd5b8084840185840137600090820190930192909252509392505050565b600080600080600060a086880312156128d557600080fd5b853567ffffffffffffffff8111156128ec57600080fd5b6128f88882890161256a565b95505061290760208701612582565b93506040860135925060608601359150608086013561292581612529565b809150509295509295909350565b6000806040838503121561294657600080fd5b823561295181612529565b91506020830135801515811461281d57600080fd5b60006020828403121561297857600080fd5b813567ffffffffffffffff81111561298f57600080fd5b61299b84828501612756565b949350505050565b600080604083850312156129b657600080fd5b82356129c181612529565b9150602083013561281d81612529565b600181811c908216806129e557607f821691505b60208210810361257c57634e487b7160e01b600052602260045260246000fd5b6000808335601e19843603018112612a1c57600080fd5b83018035915067ffffffffffffffff821115612a3757600080fd5b6020019150600581901b3603821315612a4f57600080fd5b9250929050565b60008184825b85811015612a8d578135612a6f81612529565b6001600160a01b031683526020928301929190910190600101612a5c565b509095945050505050565b60007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612ac757600080fd5b8260051b80858437919091019392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615612b2057612b20612af0565b500290565b600082612b4257634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215612b5957600080fd5b5051919050565b600060208284031215612b7257600080fd5b81516124b281612529565b600060208284031215612b8f57600080fd5b81516124b28161247c565b601f82111561140557600081815260208120601f850160051c81016020861015612bc15750805b601f850160051c820191505b8181101561130a57828155600101612bcd565b815167ffffffffffffffff811115612bfa57612bfa61270f565b612c0e81612c0884546129d1565b84612b9a565b602080601f831160018114612c435760008415612c2b5750858301515b600019600386901b1c1916600185901b17855561130a565b600085815260208120601f198616915b82811015612c7257888601518255948401946001909101908401612c53565b5085821015612c905787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251612cb28184602087016124b9565b9190910192915050565b60006001600160a01b03808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a0601f19601f85011683010190509695505050505050565b60008154612d1d816129d1565b60018281168015612d355760018114612d4a57612d79565b60ff1984168752821515830287019450612d79565b8560005260208060002060005b85811015612d705781548a820152908401908201612d57565b50505082870194505b5050505092915050565b6000612d8f8285612d10565b8351612d9f8183602088016124b9565b7f2e6a736f6e0000000000000000000000000000000000000000000000000000009101908152600501949350505050565b60006124b28284612d10565b8082018082111561072e5761072e612af056fea164736f6c6343000810000a";

type ERC721LazyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721LazyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721Lazy__factory extends ContractFactory {
  constructor(...args: ERC721LazyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _baseURI: PromiseOrValue<string>,
    _splitter: PromiseOrValue<string>,
    _fraction: PromiseOrValue<BigNumberish>,
    _router: PromiseOrValue<string>,
    _signer: PromiseOrValue<string>,
    _erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721Lazy> {
    return super.deploy(
      _name,
      _symbol,
      _baseURI,
      _splitter,
      _fraction,
      _router,
      _signer,
      _erc20,
      overrides || {}
    ) as Promise<ERC721Lazy>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _baseURI: PromiseOrValue<string>,
    _splitter: PromiseOrValue<string>,
    _fraction: PromiseOrValue<BigNumberish>,
    _router: PromiseOrValue<string>,
    _signer: PromiseOrValue<string>,
    _erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _baseURI,
      _splitter,
      _fraction,
      _router,
      _signer,
      _erc20,
      overrides || {}
    );
  }
  override attach(address: string): ERC721Lazy {
    return super.attach(address) as ERC721Lazy;
  }
  override connect(signer: Signer): ERC721Lazy__factory {
    return super.connect(signer) as ERC721Lazy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721LazyInterface {
    return new utils.Interface(_abi) as ERC721LazyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721Lazy {
    return new Contract(address, _abi, signerOrProvider) as ERC721Lazy;
  }
}
