/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../common";
import type {
  SplitterImpl,
  SplitterImplInterface,
} from "../../../lib/splitter/SplitterImpl";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
  BigNumberish,
} from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "payees",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "shares_",
        type: "uint256[]",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "AlreadyPayee",
    type: "error",
  },
  {
    inputs: [],
    name: "DeadAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "DeniedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidShare",
    type: "error",
  },
  {
    inputs: [],
    name: "LengthMismatch",
    type: "error",
  },
  {
    inputs: [],
    name: "NoPayees",
    type: "error",
  },
  {
    inputs: [],
    name: "NoShares",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "ERC20PaymentReleased",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
    ],
    name: "PayeeAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "PaymentReceived",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "PaymentReleased",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "_payees",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "_shares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "payeesLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "releasable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "releasable",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "account",
        type: "address",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "release",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "releaseAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "released",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "released",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "token",
        type: "address",
      },
    ],
    name: "totalReleased",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalReleased",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60406080815262000cee803803806200001881620002b5565b928339810182828203126200028f5781516001600160401b0392908381116200028f5781019180601f840112156200028f57825193620000626200005c86620002db565b620002b5565b928394868552602080950185600598891b830101918583116200028f578601905b8282106200029457505050838101519182116200028f57019080601f830112156200028f578151620000b96200005c82620002db565b928480858481520192881b8201019283116200028f5784809101915b8383106200027e5750505050825192815184036200026a578315620002595760005b8481106200010e5786516109e59081620003098239f35b6001600160a01b03620001228284620002f3565b511690620001318185620002f3565b51821562000248578015620002375782600052878652886000205462000226576006928354680100000000000000008110156200021057600194858201808255821015620001fa5760005287600020018160018060a01b031982541617905580600052888752818a6000205560005490828201809211620001e4577f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac928b92600055825191825288820152a101620000f7565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b885163215a865160e11b8152600490fd5b885163040357dd60e21b8152600490fd5b88516384ff3e1b60e01b8152600490fd5b8551637b21919d60e01b8152600490fd5b85516001621398b960e31b03198152600490fd5b8251815291810191859101620000d5565b600080fd5b81516001600160a01b03811681036200028f57815290860190860162000083565b6040519190601f01601f191682016001600160401b038111838210176200021057604052565b6001600160401b038111620002105760051b60200190565b8051821015620001fa5760209160051b01019056fe604060808152600480361015610056575b50361561001c57600080fd5b7f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be770906100466106eb565b51338152346020820152604090a1005b600090813560e01c90816319165587146104b6578163283248be146104665781633a98ef3914610449578163406072a9146103ee57816348b7504414610275575080635be7fde8146102565780639852595c14610212578063a3f8eace146101ec578063b34c8caf146101a8578063c45ac05014610173578063d79779b21461012f578063e33b7de3146101105763e919ecad0361001057903461010c578160031936011261010c576020906006549051908152f35b5080fd5b50903461010c578160031936011261010c576020906001549051908152f35b50903461010c57602060031936011261010c578060209273ffffffffffffffffffffffffffffffffffffffff610163610556565b1681526003845220549051908152f35b50903461010c578060031936011261010c576020906101a1610193610556565b61019b61057e565b90610877565b9051908152f35b50903461010c57602060031936011261010c578060209273ffffffffffffffffffffffffffffffffffffffff6101dc610556565b1681526005845220549051908152f35b50903461010c57602060031936011261010c576020906101a161020d610556565b610762565b50903461010c57602060031936011261010c578060209273ffffffffffffffffffffffffffffffffffffffff610246610556565b1681526002845220549051908152f35b503461027257806003193601126102725761026f6106eb565b80f35b80fd5b90503461010c578260031936011261010c5761028f610556565b9061029861057e565b73ffffffffffffffffffffffffffffffffffffffff9182821693848652600560205286862054156103c6576102cd8382610877565b93841561039e57604460108884819460209616998a83528787528c832090835286528b82206102fd8a82546105a1565b9055898252600386528b82206103148a82546105a1565b905587601452886034526fa9059cbb00000000000000000000000082525af13d15600187511417161561039357506034849052935173ffffffffffffffffffffffffffffffffffffffff9094168452602084015290917f3be5b7a71e84ed12875d241991c70855ac5817d847039e17a9d895c1ceb0f18a90604090a280f35b6390b8ec188552601cfd5b8288517fb8e10e7e000000000000000000000000000000000000000000000000000000008152fd5b5085517fb317087b000000000000000000000000000000000000000000000000000000008152fd5b83915034610445578160031936011261044557602092829161040e610556565b61041661057e565b9173ffffffffffffffffffffffffffffffffffffffff8092168452865283832091168252845220549051908152f35b8280fd5b82843461010c578160031936011261010c57602091549051908152f35b83915034610445576020600319360112610445573591600654831015610272575073ffffffffffffffffffffffffffffffffffffffff6104a76020936104f0565b92905490519260031b1c168152f35b90503461010c57602060031936011261010c573573ffffffffffffffffffffffffffffffffffffffff8116810361010c5761026f906105dd565b6006548110156105275760066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361057957565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361057957565b919082018092116105ae57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff16906000918083526005602052604090600182852054106106c25761061681610762565b6001811061069957818552600260205261063381848720546105a1565b82865260026020528386205561064b816001546105a1565b6001558480808084865af11561068c577fdf20fd1e76bc69d672e4814fafb2c449bba3a5369d8359adf9e05e6fde87b05693945082519182526020820152a1565b63b12d13eb85526004601cfd5b600483517fb8e10e7e000000000000000000000000000000000000000000000000000000008152fd5b600482517fb317087b000000000000000000000000000000000000000000000000000000008152fd5b60065460005b8181106106fc575050565b806107086001926104f0565b905490610714836104f0565b92909161073e73ffffffffffffffffffffffffffffffffffffffff809454600396871b1c16610762565b61074d575b50505050016106f1565b610759931b1c166105dd565b38808080610743565b61079e9061077347600154906105a1565b73ffffffffffffffffffffffffffffffffffffffff82166000526002602052604060002054916107a1565b90565b9073ffffffffffffffffffffffffffffffffffffffff600092168252600560205260408220549081810291818304149015171561084a57815490811561081d57049182039182116107f0575090565b807f4e487b7100000000000000000000000000000000000000000000000000000000602492526011600452fd5b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526012600452fd5b6024827f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b919073ffffffffffffffffffffffffffffffffffffffff80931660408051947f70a0823100000000000000000000000000000000000000000000000000000000865230600487015260208087602481875afa9687156109a457600097610911575b506108f461079e969785600052600383528460002054906105a1565b9360005260048152826000209185166000525260002054916107a1565b96813d831161099d575b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f820116890189811067ffffffffffffffff8211176109705783918a9187528101031261027257509551956108f46108d8565b6024837f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b503d61091b565b83513d6000823e3d90fdfea2646970667358221220c903a320194fc96df137f52a240c4a2928166b92a43561abfb1f732376d7e0e464736f6c63430008130033";

type SplitterImplConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SplitterImplConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SplitterImpl__factory extends ContractFactory {
  constructor(...args: SplitterImplConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    payees: PromiseOrValue<string>[],
    shares_: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<SplitterImpl> {
    return super.deploy(
      payees,
      shares_,
      overrides || {}
    ) as Promise<SplitterImpl>;
  }
  override getDeployTransaction(
    payees: PromiseOrValue<string>[],
    shares_: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(payees, shares_, overrides || {});
  }
  override attach(address: string): SplitterImpl {
    return super.attach(address) as SplitterImpl;
  }
  override connect(signer: Signer): SplitterImpl__factory {
    return super.connect(signer) as SplitterImpl__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SplitterImplInterface {
    return new utils.Interface(_abi) as SplitterImplInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SplitterImpl {
    return new Contract(address, _abi, signerOrProvider) as SplitterImpl;
  }
}
