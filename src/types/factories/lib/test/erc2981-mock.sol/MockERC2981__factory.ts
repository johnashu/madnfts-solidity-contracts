/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockERC2981,
  MockERC2981Interface,
} from "../../../../lib/test/erc2981-mock.sol/MockERC2981";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "newRoyaltyFee",
        type: "uint256",
      },
    ],
    name: "RoyaltyFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newRecipient",
        type: "address",
      },
    ],
    name: "RoyaltyRecipientSet",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "salePrice",
        type: "uint256",
      },
    ],
    name: "royaltyInfo",
    outputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "royaltyAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "setRoyaltyFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "setRoyaltyRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001b3238038062001b32833981810160405281019062000037919062000a32565b336200006c7f2c19100173683c2e15fdd1471eb6429e5f63cf1a14f39624d0e8c609772b4e9f60001b6200030760201b60201c565b620000a07f34d6d5d32601d1fe3300275cd81d1c3beb6166444c4276baf0113e65b3713a4560001b6200030760201b60201c565b620000d47f89943458464d563dd9a095c48403f17b54f9fa915fa0fb16861ce8c6266aa98f60001b6200030760201b60201c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620001497f2aa2752b81074954c829cb8365d5e5a70269885edab52ceb3ed5101296df290d60001b6200030760201b60201c565b6200017d7f082ab2c49a55a2768e4a5dbbf2cef1ff93d3aefa5ba1ba58b7b1014fa11ce1d260001b6200030760201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7660405160405180910390a3506200020d7f9c2d0a803ecb5586a4d655ee7c7552bc82a573c006c15d007e4d956c3e311f3960001b6200030a60201b60201c565b620002417f17452f443a65e0e62f4708f1860ff89e24b85ea1abc7a12e4fedb7a2719e845060001b6200030a60201b60201c565b620002757f84f7c2af2761162fa0dad662d5dc9353c4ff67f5e28823cfdc9761d9c866ce0c60001b6200030a60201b60201c565b62000286816200030d60201b60201c565b620002ba7f3b0978852c9d76f38de0babc7c097202cdcbae50a78413dc0ed48009056bf75b60001b6200030a60201b60201c565b620002ee7f05498f67ea22887189d7b72de916e6369e3fb6f80acf1be34da499722e0c192a60001b6200030a60201b60201c565b620002ff826200068560201b60201c565b505062000afc565b50565b50565b620003417f52755f23803c7ba056c7924bce14d48a9c1d077b42d134c3467b61b1b82c3bbf60001b6200030760201b60201c565b620003757f92ac546fd5dd34c37391744e3ba6704c1b1496220be2c0b5c6692ba47661b2ef60001b6200030760201b60201c565b620003a97f8fb5c29628fd11923e8d7f8f61d02312f616cf1d152bbe3f13ea170ae05ec1d660001b6200030760201b60201c565b620003dd7fd06599478754a990259f8712f3efcef0fe990cc8c2f7f7b30e2f70a02c336d9160001b6200030760201b60201c565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000470576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004679062000ada565b60405180910390fd5b620004a47fe4df94aabe7630a38a6d8d12d1df6facac0618ec13b3d96d08f2d2d5873c699d60001b6200030760201b60201c565b620004d87f1c4e2de287cdff0410f529cae4e3a62cbda4ae58e086dfee46d0bedca14e5e1b60001b6200030760201b60201c565b6200050c7fdec44073dcf7838d83924defd3fe9f34d885f1761a847251f4cfd74b43b905b560001b6200030a60201b60201c565b620005407ffa8781392b4964f076cad67aa310129d6955fc8045df67f7c26ae5d50c937e4d60001b6200030a60201b60201c565b620005747f603d40b44aaafe0370ceb618bceb02c00b0f982d9349fe15f5b5b11ffbcfe74a60001b6200030a60201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620005e97f33c2bc6f901dcd486bdbb9d85904ae696ff3af45160a0fc08d7ccd191e7e2bf860001b6200030a60201b60201c565b6200061d7fc000a482586c80e5b01bd61094326b6e8ef8943bff568ce142643c4e090001b560001b6200030a60201b60201c565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2a5a1009e36beb67c3a1ada61dd1343d7e9ec62c70965492fbaa06234f8316b160405160405180910390a250565b620006b97f52755f23803c7ba056c7924bce14d48a9c1d077b42d134c3467b61b1b82c3bbf60001b6200030760201b60201c565b620006ed7f92ac546fd5dd34c37391744e3ba6704c1b1496220be2c0b5c6692ba47661b2ef60001b6200030760201b60201c565b620007217f8fb5c29628fd11923e8d7f8f61d02312f616cf1d152bbe3f13ea170ae05ec1d660001b6200030760201b60201c565b620007557fd06599478754a990259f8712f3efcef0fe990cc8c2f7f7b30e2f70a02c336d9160001b6200030760201b60201c565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620007e8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007df9062000ada565b60405180910390fd5b6200081c7fe4df94aabe7630a38a6d8d12d1df6facac0618ec13b3d96d08f2d2d5873c699d60001b6200030760201b60201c565b620008507f1c4e2de287cdff0410f529cae4e3a62cbda4ae58e086dfee46d0bedca14e5e1b60001b6200030760201b60201c565b620008847f8ef7cf42d664ea1870cfc689b7ef21e3d38328712af2df97d95e559f8b5f4d2060001b6200030a60201b60201c565b620008b87f9e5752ae526c1df2306cb8fef459c42194867901c0cf70edeb2356611ab298fa60001b6200030a60201b60201c565b620008ec7fd0dd8cdebd5f68b82ab129179a6600b5f72d3bc2dde4171a56687f1a298f8bbd60001b6200030a60201b60201c565b80600081905550620009277f6bb44641c36e6ba07064a31c5836fa2cee0c9a75907dff640f9be9e1589b77b660001b6200030a60201b60201c565b6200095b7fd3ddd73010bb27c32b02f77ac34fe05a86cc8085f2f79540fd6bc962cf00f22e60001b6200030a60201b60201c565b6000547fc36422dcc77a5c93a5c48743078f8130c9fcc2a0ff893904ee62a3565688117c60405160405180910390a250565b600080fd5b6000819050919050565b620009a78162000992565b8114620009b357600080fd5b50565b600081519050620009c7816200099c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620009fa82620009cd565b9050919050565b62000a0c81620009ed565b811462000a1857600080fd5b50565b60008151905062000a2c8162000a01565b92915050565b6000806040838503121562000a4c5762000a4b6200098d565b5b600062000a5c85828601620009b6565b925050602062000a6f8582860162000a1b565b9150509250929050565b600082825260208201905092915050565b7f554e415554484f52495a45440000000000000000000000000000000000000000600082015250565b600062000ac2600c8362000a79565b915062000acf8262000a8a565b602082019050919050565b6000602082019050818103600083015262000af58162000ab3565b9050919050565b6110268062000b0c6000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80633e4086e5116100505780633e4086e5146100f457806341e42f30146101105780638da5cb5b1461012c57610072565b806301ffc9a71461007757806313af4035146100a75780632a55205a146100c3575b600080fd5b610091600480360381019061008c9190610cc0565b61014a565b60405161009e9190610d08565b60405180910390f35b6100c160048036038101906100bc9190610d81565b610230565b005b6100dd60048036038101906100d89190610de4565b610542565b6040516100eb929190610e42565b60405180910390f35b61010e60048036038101906101099190610e6b565b61066a565b005b61012a60048036038101906101259190610d81565b610917565b005b610134610c34565b6040516101419190610e98565b60405180910390f35b60006101787fa16af21f47ac034816610008ab65987e3b3451f3de91a023c28cf3f361ed430e60001b610c5a565b6101a47f8ede054a39db9c8acb4b5d605219adc18ef2038b6e10f6d685ea86fe5f13b37560001b610c5a565b6101d07fc8d99d33ee1c25c65615d855fc747c203328a802fcc7b479f6de7147d9ac1eb160001b610c5a565b6301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806102295750632a55205a60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b61025c7f52755f23803c7ba056c7924bce14d48a9c1d077b42d134c3467b61b1b82c3bbf60001b610c5d565b6102887f92ac546fd5dd34c37391744e3ba6704c1b1496220be2c0b5c6692ba47661b2ef60001b610c5d565b6102b47f8fb5c29628fd11923e8d7f8f61d02312f616cf1d152bbe3f13ea170ae05ec1d660001b610c5d565b6102e07fd06599478754a990259f8712f3efcef0fe990cc8c2f7f7b30e2f70a02c336d9160001b610c5d565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036790610f10565b60405180910390fd5b61039c7fe4df94aabe7630a38a6d8d12d1df6facac0618ec13b3d96d08f2d2d5873c699d60001b610c5d565b6103c87f1c4e2de287cdff0410f529cae4e3a62cbda4ae58e086dfee46d0bedca14e5e1b60001b610c5d565b6103f47fad29a545d7205ae01dee166f9409b8c48dae9b1c33cd94f1e7ee17347653e53760001b610c5d565b6104207f198bf241fc1de88a29515cdf7c482c1905cd4722ef9d16f90dc714d714df5b8e60001b610c5d565b61044c7f0c446d6e0e49a0e795b1a416b8bbc215cf250dc715a76b7a54330b67b7afbaf860001b610c5d565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506104b97f279701b8caa06450abf432f5c34bb54bb6e20bd61d2e0336e3305d858466e99060001b610c5d565b6104e57fb2c8fc16f3f5f69aa33bdafb0e6a6d4393ca48d95cceb153dd0a4047a8b57b9e60001b610c5d565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7660405160405180910390a350565b6000806105717f0a2844e919daf01f9865f1f866be9cd6db5f7d33a63ed9060329b5d756d1b4bd60001b610c5a565b61059d7f140417d76f9fde2143fef73be9056b99b5b3907943c5902e12b44d5bf882839760001b610c5a565b6105c97f51e2462fa66d4ca7052aa578b3237bf48b3bb728333885113be10799677f3b3560001b610c5a565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915061061a7f18ca4fbb47c4fa70b17de2e7255352e5262b361d5a9462eddb971af9a1f1fa8260001b610c5a565b6106467fd18e401eaed0f0739dc51f18a4525f92146974ae8cecc622bad8efe879f7dbe560001b610c5a565b612710600054846106579190610f5f565b6106619190610fe8565b90509250929050565b6106967f52755f23803c7ba056c7924bce14d48a9c1d077b42d134c3467b61b1b82c3bbf60001b610c5d565b6106c27f92ac546fd5dd34c37391744e3ba6704c1b1496220be2c0b5c6692ba47661b2ef60001b610c5d565b6106ee7f8fb5c29628fd11923e8d7f8f61d02312f616cf1d152bbe3f13ea170ae05ec1d660001b610c5d565b61071a7fd06599478754a990259f8712f3efcef0fe990cc8c2f7f7b30e2f70a02c336d9160001b610c5d565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a190610f10565b60405180910390fd5b6107d67fe4df94aabe7630a38a6d8d12d1df6facac0618ec13b3d96d08f2d2d5873c699d60001b610c5d565b6108027f1c4e2de287cdff0410f529cae4e3a62cbda4ae58e086dfee46d0bedca14e5e1b60001b610c5d565b61082e7f8ef7cf42d664ea1870cfc689b7ef21e3d38328712af2df97d95e559f8b5f4d2060001b610c60565b61085a7f9e5752ae526c1df2306cb8fef459c42194867901c0cf70edeb2356611ab298fa60001b610c60565b6108867fd0dd8cdebd5f68b82ab129179a6600b5f72d3bc2dde4171a56687f1a298f8bbd60001b610c60565b806000819055506108b97f6bb44641c36e6ba07064a31c5836fa2cee0c9a75907dff640f9be9e1589b77b660001b610c60565b6108e57fd3ddd73010bb27c32b02f77ac34fe05a86cc8085f2f79540fd6bc962cf00f22e60001b610c60565b6000547fc36422dcc77a5c93a5c48743078f8130c9fcc2a0ff893904ee62a3565688117c60405160405180910390a250565b6109437f52755f23803c7ba056c7924bce14d48a9c1d077b42d134c3467b61b1b82c3bbf60001b610c5d565b61096f7f92ac546fd5dd34c37391744e3ba6704c1b1496220be2c0b5c6692ba47661b2ef60001b610c5d565b61099b7f8fb5c29628fd11923e8d7f8f61d02312f616cf1d152bbe3f13ea170ae05ec1d660001b610c5d565b6109c77fd06599478754a990259f8712f3efcef0fe990cc8c2f7f7b30e2f70a02c336d9160001b610c5d565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4e90610f10565b60405180910390fd5b610a837fe4df94aabe7630a38a6d8d12d1df6facac0618ec13b3d96d08f2d2d5873c699d60001b610c5d565b610aaf7f1c4e2de287cdff0410f529cae4e3a62cbda4ae58e086dfee46d0bedca14e5e1b60001b610c5d565b610adb7fdec44073dcf7838d83924defd3fe9f34d885f1761a847251f4cfd74b43b905b560001b610c60565b610b077ffa8781392b4964f076cad67aa310129d6955fc8045df67f7c26ae5d50c937e4d60001b610c60565b610b337f603d40b44aaafe0370ceb618bceb02c00b0f982d9349fe15f5b5b11ffbcfe74a60001b610c60565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610ba07f33c2bc6f901dcd486bdbb9d85904ae696ff3af45160a0fc08d7ccd191e7e2bf860001b610c60565b610bcc7fc000a482586c80e5b01bd61094326b6e8ef8943bff568ce142643c4e090001b560001b610c60565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f2a5a1009e36beb67c3a1ada61dd1343d7e9ec62c70965492fbaa06234f8316b160405160405180910390a250565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b50565b50565b50565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610c9d81610c68565b8114610ca857600080fd5b50565b600081359050610cba81610c94565b92915050565b600060208284031215610cd657610cd5610c63565b5b6000610ce484828501610cab565b91505092915050565b60008115159050919050565b610d0281610ced565b82525050565b6000602082019050610d1d6000830184610cf9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d4e82610d23565b9050919050565b610d5e81610d43565b8114610d6957600080fd5b50565b600081359050610d7b81610d55565b92915050565b600060208284031215610d9757610d96610c63565b5b6000610da584828501610d6c565b91505092915050565b6000819050919050565b610dc181610dae565b8114610dcc57600080fd5b50565b600081359050610dde81610db8565b92915050565b60008060408385031215610dfb57610dfa610c63565b5b6000610e0985828601610dcf565b9250506020610e1a85828601610dcf565b9150509250929050565b610e2d81610d43565b82525050565b610e3c81610dae565b82525050565b6000604082019050610e576000830185610e24565b610e646020830184610e33565b9392505050565b600060208284031215610e8157610e80610c63565b5b6000610e8f84828501610dcf565b91505092915050565b6000602082019050610ead6000830184610e24565b92915050565b600082825260208201905092915050565b7f554e415554484f52495a45440000000000000000000000000000000000000000600082015250565b6000610efa600c83610eb3565b9150610f0582610ec4565b602082019050919050565b60006020820190508181036000830152610f2981610eed565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f6a82610dae565b9150610f7583610dae565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fae57610fad610f30565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ff382610dae565b9150610ffe83610dae565b92508261100e5761100d610fb9565b5b82820490509291505056fea164736f6c6343000810000a";

type MockERC2981ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC2981ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC2981__factory extends ContractFactory {
  constructor(...args: MockERC2981ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    fee: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC2981> {
    return super.deploy(
      fee,
      recipient,
      overrides || {}
    ) as Promise<MockERC2981>;
  }
  override getDeployTransaction(
    fee: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(fee, recipient, overrides || {});
  }
  override attach(address: string): MockERC2981 {
    return super.attach(address) as MockERC2981;
  }
  override connect(signer: Signer): MockERC2981__factory {
    return super.connect(signer) as MockERC2981__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC2981Interface {
    return new utils.Interface(_abi) as MockERC2981Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC2981 {
    return new Contract(address, _abi, signerOrProvider) as MockERC2981;
  }
}
