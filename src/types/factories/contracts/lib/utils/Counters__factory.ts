/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../../common";
import type {
  Counters,
  CountersInterface,
} from "../../../../contracts/lib/utils/Counters";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [],
    name: "DecOverflow",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122045a31072dacb97be9170ea826bd92eb63f7832362d744e7416501ec6a2c4d5fc64736f6c63430008100033";

type CountersConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CountersConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Counters__factory extends ContractFactory {
  constructor(...args: CountersConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Counters> {
    return super.deploy(overrides || {}) as Promise<Counters>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Counters {
    return super.attach(address) as Counters;
  }
  override connect(signer: Signer): Counters__factory {
    return super.connect(signer) as Counters__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CountersInterface {
    return new utils.Interface(_abi) as CountersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Counters {
    return new Contract(address, _abi, signerOrProvider) as Counters;
  }
}
