/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../../../common";
import type {
  MockERC2981,
  MockERC2981Interface,
} from "../../../../../contracts/lib/test/erc2981-mock.sol/MockERC2981";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "newRoyaltyFee",
        type: "uint256",
      },
    ],
    name: "RoyaltyFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newRecipient",
        type: "address",
      },
    ],
    name: "RoyaltyRecipientSet",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "salePrice",
        type: "uint256",
      },
    ],
    name: "royaltyInfo",
    outputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "royaltyAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
    ],
    name: "setRoyaltyFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "setRoyaltyRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161068138038061068183398101604081905261002f9161019c565b600280546001600160a01b0319163390811790915560405181906000907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76908290a35061007b8161008b565b61008482610123565b50506101d9565b6002546001600160a01b031633146100d95760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064015b60405180910390fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040517f2a5a1009e36beb67c3a1ada61dd1343d7e9ec62c70965492fbaa06234f8316b190600090a250565b6002546001600160a01b0316331461016c5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016100d0565b600081815560405182917fc36422dcc77a5c93a5c48743078f8130c9fcc2a0ff893904ee62a3565688117c91a250565b600080604083850312156101af57600080fd5b825160208401519092506001600160a01b03811681146101ce57600080fd5b809150509250929050565b610499806101e86000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80633e4086e5116100505780633e4086e5146100e657806341e42f30146100f95780638da5cb5b1461010c57600080fd5b806301ffc9a71461007757806313af40351461009f5780632a55205a146100b4575b600080fd5b61008a6100853660046103a8565b610137565b60405190151581526020015b60405180910390f35b6100b26100ad3660046103d9565b61016e565b005b6100c76100c2366004610402565b610250565b604080516001600160a01b039093168352602083019190915201610096565b6100b26100f4366004610424565b610284565b6100b26101073660046103d9565b6102fd565b60025461011f906001600160a01b031681565b6040516001600160a01b039091168152602001610096565b60006301ffc9a760e01b6001600160e01b031983161480610168575063152a902d60e11b6001600160e01b03198316145b92915050565b6002546001600160a01b031633146101bc5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064015b60405180910390fd5b6001600160a01b0381166102125760405162461bcd60e51b815260206004820152600d60248201527f496e76616c6964206f776e65720000000000000000000000000000000000000060448201526064016101b3565b60028190556040516001600160a01b0382169033907f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7690600090a350565b600154600080546001600160a01b039092169161271090610271908561043d565b61027b919061046a565b90509250929050565b6002546001600160a01b031633146102cd5760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016101b3565b600081815560405182917fc36422dcc77a5c93a5c48743078f8130c9fcc2a0ff893904ee62a3565688117c91a250565b6002546001600160a01b031633146103465760405162461bcd60e51b815260206004820152600c60248201526b15539055551213d49256915160a21b60448201526064016101b3565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f2a5a1009e36beb67c3a1ada61dd1343d7e9ec62c70965492fbaa06234f8316b190600090a250565b6000602082840312156103ba57600080fd5b81356001600160e01b0319811681146103d257600080fd5b9392505050565b6000602082840312156103eb57600080fd5b81356001600160a01b03811681146103d257600080fd5b6000806040838503121561041557600080fd5b50508035926020909101359150565b60006020828403121561043657600080fd5b5035919050565b600081600019048311821515161561046557634e487b7160e01b600052601160045260246000fd5b500290565b60008261048757634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c6343000810000a";

type MockERC2981ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC2981ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC2981__factory extends ContractFactory {
  constructor(...args: MockERC2981ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    fee: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC2981> {
    return super.deploy(
      fee,
      recipient,
      overrides || {}
    ) as Promise<MockERC2981>;
  }
  override getDeployTransaction(
    fee: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(fee, recipient, overrides || {});
  }
  override attach(address: string): MockERC2981 {
    return super.attach(address) as MockERC2981;
  }
  override connect(signer: Signer): MockERC2981__factory {
    return super.connect(signer) as MockERC2981__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC2981Interface {
    return new utils.Interface(_abi) as MockERC2981Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC2981 {
    return new Contract(address, _abi, signerOrProvider) as MockERC2981;
  }
}
