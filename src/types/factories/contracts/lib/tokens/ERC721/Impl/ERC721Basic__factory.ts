/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { PromiseOrValue } from "../../../../../../common";
import type {
  ERC721Basic,
  ERC721BasicInterface,
} from "../../../../../../contracts/lib/tokens/ERC721/Impl/ERC721Basic";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "_baseURI",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_price",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_maxSupply",
        type: "uint256",
      },
      {
        internalType: "contract SplitterImpl",
        name: "_splitter",
        type: "address",
      },
      {
        internalType: "uint96",
        name: "_fraction",
        type: "uint96",
      },
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
      {
        internalType: "contract ERC20",
        name: "_erc20",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "LoopOverflow",
    type: "error",
  },
  {
    inputs: [],
    name: "MaxSupplyReached",
    type: "error",
  },
  {
    inputs: [],
    name: "NotMintedYet",
    type: "error",
  },
  {
    inputs: [],
    name: "PublicMintClosed",
    type: "error",
  },
  {
    inputs: [],
    name: "UriLocked",
    type: "error",
  },
  {
    inputs: [],
    name: "WrongPrice",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "baseURI",
        type: "string",
      },
    ],
    name: "BaseURILocked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "newBaseURI",
        type: "string",
      },
    ],
    name: "BaseURISet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bool",
        name: "newPublicState",
        type: "bool",
      },
    ],
    name: "PublicMintStateSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "newRoyaltyFee",
        type: "uint256",
      },
    ],
    name: "RoyaltyFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "newRecipient",
        type: "address",
      },
    ],
    name: "RoyaltyRecipientSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "baseURILock",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "address",
        name: "erc20Owner",
        type: "address",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "erc20",
    outputs: [
      {
        internalType: "contract ERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "feeCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBaseURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getMintCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "maxSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "erc20Owner",
        type: "address",
      },
    ],
    name: "mintTo",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "publicMintState",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "salePrice",
        type: "uint256",
      },
    ],
    name: "royaltyInfo",
    outputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "royaltyAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_baseURI",
        type: "string",
      },
    ],
    name: "setBaseURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "setBaseURILock",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_publicMintState",
        type: "bool",
      },
    ],
    name: "setPublicMintState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "splitter",
    outputs: [
      {
        internalType: "contract SplitterImpl",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ERC20",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "withdrawERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523462000618576200328b803803806200001d816200061d565b92833981019061012081830312620006135780519160018060401b03928381116200060e57816200005091840162000658565b906020808401518581116200060957826200006d91860162000658565b9160408501519086821162000604576200008991860162000658565b93606081015160808201519060a08301519560018060a01b0394858816809803620005ff5760c08501519860018060601b038a16809a03620005fa5760e086015195878716809703620005f5576101000151968716809703620005f0578251918b8311620005da576000988954936001958686811c96168015620005cf575b84871014620005bb578190601f968781116200055e575b5084908d888411600114620004f15792620004e4575b505081871b916000199060031b1c1916178a555b8051908d8211620004d05785548681811c91168015620004c5575b84821014620004b15790818684931162000459575b508390868311600114620003eb578c92620003de575b505081861b916000199060031b1c19161784555b60018060a01b03199680886008541617600855897f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d7681604051a38360095581519b8c11620003ca57600f548481811c91168015620003bf575b82821014620003ab5780848e92116200035e575b505080928c11600114620002cf575099809281927f2a5a1009e36beb67c3a1ada61dd1343d7e9ec62c70965492fbaa06234f8316b19a9b9c8a94620002c0575b50501b916000199060031b1c191617600f555b6011556012558481600a541617600a558560065584816007541617600755600b541617600b55604051937fc36422dcc77a5c93a5c48743078f8130c9fcc2a0ff893904ee62a3565688117c8286a283a2612ba09081620006eb8239f35b90919350015191388062000250565b909a91601f1983169b600f8a528c838b20938b915b821062000342575050837f2a5a1009e36beb67c3a1ada61dd1343d7e9ec62c70965492fbaa06234f8316b19b9c9d1062000328575b505050811b01600f5562000263565b015160001960f88460031b161c1916905538808062000319565b909293818f9188829188870151815501960194019190620002e4565b600f8b5284838c20918482850160051c84019410620003a1575b908792910160051c01915b8281106200039557508d915062000210565b8b815501859062000383565b9250819262000378565b60248a634e487b7160e01b81526022600452fd5b90607f1690620001fc565b602489634e487b7160e01b81526041600452fd5b909150015138806200018f565b879350908c91601f198416858452868420935b878282106200043957505084116200041f575b505050811b018455620001a3565b015160001960f88460031b161c1916905538808062000411565b9192939596829195878601518155019501930190899594939291620003fe565b909150868c52838c208680850160051c820192868610620004a7575b918991869594930160051c01915b8281106200049357505062000179565b90919293508d815501908784939262000483565b9250819262000475565b60248c634e487b7160e01b81526022600452fd5b90607f169062000164565b60248b634e487b7160e01b81526041600452fd5b9091500151388062000135565b9190899450601f198416838052878420935b888282106200053e575050841162000524575b505050811b018a5562000149565b015160001960f88460031b161c1916905538808062000516565b91929395968291958786015181550195019301908a959493929162000503565b9091508c8052848d208780850160051c820192878610620005b1575b8f90928b92879695940160051c0192905b8382106200059c575050506200011f565b90809293949550550190888493928f6200058b565b925081926200057a565b60248c634e487b7160e01b81526022600452fd5b95607f169562000108565b634e487b7160e01b600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b9060405191601f8019910116820182811060018060401b038211176200064257604052565b634e487b7160e01b600052604160045260246000fd5b919080601f84011215620006e557825160018060401b038111620006cf576020906200068d82601f19601f840116016200061d565b92818452828287010111620006ca5760005b818110620006b557508260009394955001015290565b8083809288010151828287010152016200069f565b600080fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c806301ffc9a71461037a57806306fdde031461036c578063081812fc1461035e578063095ea7b31461035057806313af403514610342578063150b7a021461033457806318160ddd1461032657806322ab47a11461031857806323b872dd1461030a5780632a55205a146102fc578063362c0cb5146102ee5780633cd8045e146102e057806342842e0e146102d2578063438b1b4b146102c45780634edd2d49146102b657806351cff8d9146102a857806355f804b31461029a5780636352211e1461028c57806366c879a91461027e57806370a0823114610270578063714c539814610262578063785e9e8614610254578063879fbedf146102465780638da5cb5b146102385780638fc3b5491461022a5780639456fbcc1461021c57806395d89b411461020e578063a035b1fe14610200578063a0712d68146101f2578063a22cb465146101e4578063b88d4fde146101d6578063c87b56dd146101c8578063d5abeb01146101ba578063e1c38ed9146101ac5763e985e9c51461019f575b61000e565b6101a7611c9b565b61019a565b506101b5611c2b565b61019a565b506101c3611c02565b61019a565b506101d1611b33565b61019a565b506101df611a35565b61019a565b506101ed61199a565b61019a565b506101fb611820565b61019a565b506102096117f7565b61019a565b50610217611705565b61019a565b50610225611364565b61019a565b5061023361133b565b61019a565b5061024161130a565b61019a565b5061024f61128b565b61019a565b5061025d61125a565b61019a565b5061026b611166565b61019a565b506102796110cb565b61019a565b50610287611051565b61019a565b50610295611007565b61019a565b506102a3610f5c565b61019a565b506102b1610cb5565b61019a565b506102bf610c87565b61019a565b506102cd610bc2565b61019a565b506102db610aef565b61019a565b506102e9610abe565b61019a565b506102f7610a14565b61019a565b506103056109a6565b61019a565b50610313610982565b61019a565b50610321610923565b61019a565b5061032f6108fa565b61019a565b5061033d6108c6565b61019a565b5061034b61078b565b61019a565b506103596106d0565b61019a565b5061036761066d565b61019a565b5061037561052c565b61019a565b5061038361039e565b61019a565b63ffffffff60e01b81160361039957565b600080fd5b503461042c5760206003193601126104275760206004356103be81610388565b63ffffffff60e01b166301ffc9a760e01b8114908115610415575b8115610403575b81156103f2575b506040519015158152f35b905063152a902d60e11b14386103e7565b9050635b5e139f60e01b8114906103e0565b90506380ac58cd60e01b8114906103d9565b600080fd5b600080fd5b90600182811c92168015610461575b602083101461044b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610440565b600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80290565b50634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff8211176104ce575b604052565b6104d6610494565b6104c9565b60005b8381106104ef575050906000910152565b8060209183015181850152016104de565b6040916020825261052081518092816020860152602086860191016104db565b601f8019910116010190565b503461061957600080600319360112610616576040519080805461054f81610431565b9182855260019182811690816000146105ec575060011461058b575b6105878561057b818703826104ab565b60405191829182610500565b0390f35b80809450527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b8284106105d1575050509061057b81602061058794820101929361056b565b818160209295939495548385890101520191019291906105b2565b8695506105879693506020925061057b94915060ff191682840152151560051b820101929361056b565b80fd5b600080fd5b6000526004602052604060002090565b6000526002602052604060002090565b6000526004602052604060002090565b60018060a01b031690565b919091602081019260018060a01b03169052565b50346106a75760206003193601126106a2576004356000526004602052602060018060a01b0360406000205416604051908152f35b600080fd5b600080fd5b60018060a01b038116036106bc57565b600080fd5b602435906106ce826106ac565b565b5034610786576040600319360112610781576004356106ee816106ac565b60243590600091808352600260205260018060a01b038060408520541690813314801561075d575b61071f90611da7565b6107318461072c8561061e565b611df2565b6040519316907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258585a4f35b50818552600560205261071f60ff6107783360408920611c84565b54169050610716565b600080fd5b600080fd5b503461084157602060031936011261083c576004356107a9816106ac565b60018060a01b036107bf81600854163314611d09565b811680156107f85760009160085560405190337f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d768484a3f35b606460405162461bcd60e51b815260206004820152600d60248201527f496e76616c6964206f776e6572000000000000000000000000000000000000006044820152fd5b600080fd5b600080fd5b60806003198201126108c15760043561085e816106ac565b9160243561086b816106ac565b916044359160643567ffffffffffffffff928382116108bc57806023830112156108b75781600401359384116108b257602484830101116108ad576024019190565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b50346108eb576108d536610846565b50505050506020604051630a85bd0160e11b8152f35b600080fd5b9190602083019252565b503461091e576000600319360112610919576020600c54604051908152f35b600080fd5b600080fd5b503461094c57600060031936011261094757602060ff601354166040519015158152f35b600080fd5b600080fd5b606090600319011261097d57600435610969816106ac565b90602435610976816106ac565b9060443590565b600080fd5b50346109a15761099a61099436610951565b91611e90565b6000604051f35b600080fd5b50346109e85760406003193601126109e357604060018060a01b03600754166127106109d6600654602435612678565b0482519182526020820152f35b600080fd5b600080fd5b60209067ffffffffffffffff8111610a07575b60051b0190565b610a0f610494565b610a00565b506040600319360112610ab95760043567ffffffffffffffff8111610ab45736602382011215610aaf57806004013590610a4d826109ed565b90610a5b60405192836104ab565b82825260209260248484019160051b83010191368311610aaa57602401905b828210610a9a57610a9384610a8d6106c1565b906124aa565b6000604051f35b8480918335815201910190610a7a565b600080fd5b600080fd5b600080fd5b600080fd5b5034610aea576000600319360112610ae557602060018060a01b03600a5416604051908152f35b600080fd5b600080fd5b5034610bbd57610b21610b0136610951565b9190610b0e838284611e90565b803b15928315610b28575b50505061205a565b6000604051f35b6000929350602091610b5391604051948580948193630a85bd0160e11b998a8452336004850161201f565b039260018060a01b03165af1908115610bb0575b600091610b82575b5063ffffffff60e01b1614388080610b19565b610ba3915060203d8111610ba9575b610b9b81836104ab565b810190611fd6565b38610b6f565b503d610b91565b610bb861204d565b610b67565b600080fd5b506060600319360112610c8257600435610bdb816106ac565b60243590604435610beb816106ac565b610c0060018060a01b03600854163314611d09565b600d54838101809111610c75575b60125410600014610c2a57600460405163d05cb60960e01b8152fd5b610c33906126d8565b6000905b828210610c59575010610c4b576000604051f35b63dfb035c96000526004601cfd5b90600190610c6e610c686128b7565b8461234d565b0190610c37565b610c7d612336565b610c0e565b600080fd5b5034610cb0576000600319360112610cab57602060ff601054166040519015158152f35b600080fd5b600080fd5b5034610f5757602080600319360112610f52576004803591610cd6836106ac565b60018060a01b0390610ced82600854163314611d09565b82610d01610cfc600a5461064e565b61064e565b948260409687519687809263e919ecad60e01b82525afa948515610f45575b600095610f16575b50610d32856125dd565b92610d3c866125dd565b94600e549081151580610f0b575b600014610f005790610d6791610d60824761260f565b9416612a14565b610d6f611e65565b5b600084610d86610d81600a5461064e565b61064e565b915b89898210610dd25789898460005b838110610da35760008551f35b80610dcc610dbb610db66001948661259f565b6126a1565b610dc5838761259f565b5190612a14565b01610d96565b610e66610e60600194610e3287868a8d8882610e6b9a518096631419245f60e11b82528180610e03898883016108f0565b03915afa948515610ef3575b600095610ec2575b5090849151958692839263b34c8caf60e01b84528301610659565b03818d5afa928315610eb5575b600093610e7e575b50610e5690610e5b939461259f565b612647565b612654565b87612678565b612699565b610e75828a61259f565b52018590610d88565b610e5b935090610ea6610e56928d803d10610eae575b610e9e81836104ab565b8101906125c9565b935090610e47565b503d610e94565b610ebd61204d565b610e3f565b610ee491929550833d8511610eec575b610edc81836104ab565b81019061262a565b939038610e17565b503d610ed2565b610efb61204d565b610e0f565b505090504790610d70565b508084161515610d4a565b610f37919550833d8511610f3e575b610f2f81836104ab565b8101906125c9565b9338610d28565b503d610f25565b610f4d61204d565b610d20565b600080fd5b600080fd5b5034611002576020600319360112610ffd5760043567ffffffffffffffff808211610ff85736602383011215610ff3578160040135908111610fe6575b60405190610fb16020601f19601f84011601836104ab565b8082523660248285010111610fe1576020816000926024610fda960183860137830101526120a5565b6000604051f35b600080fd5b610fee610494565b610f99565b600080fd5b600080fd5b600080fd5b600080fd5b503461104c576020600319360112611047576004356000526002602052602060018060a01b036040600020541661103f811515611d54565b604051908152f35b600080fd5b600080fd5b50346110c65760006003193601126110c15761107860018060a01b03600854163314611d09565b600160ff19601054161760105560006040518061109481612296565b039020604051907f8f0a54da7ee5bbe880036935fcef1dc9f0568cbde68bcbd5e1eedd56df052ca08383a2f35b600080fd5b600080fd5b503461116157602060031936011261115c576004356110e9816106ac565b60018060a01b03168015611118576000526003602052611114604060002054604051918291826108f0565b0390f35b606460405162461bcd60e51b815260206004820152600c60248201527f5a45524f5f4144445245535300000000000000000000000000000000000000006044820152fd5b600080fd5b600080fd5b503461125557600080600319360112611252576040519080600f5461118a81610431565b91828552600191828116908160001461122857506001146111c6575b6111c2856111b6818703826104ab565b60405191829182610500565b0390f35b9250600f83527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8025b82841061120d57505050906111b68160206111c29482010192936111a6565b818160209295939495548385890101520191019291906111ee565b8695506111c2969350602092506111b694915060ff191682840152151560051b82010192936111a6565b80fd5b600080fd5b503461128657600060031936011261128157602060018060a01b03600b5416604051908152f35b600080fd5b600080fd5b5034611305576020600319360112611300576004358015158091036112fb576000906112c260018060a01b03600854163314611d09565b60ff196013541660ff821617601355604051907f2f3b349e2956d565a50532dcc875a49be7f558411642122cf5e50ca9b4bb14e68383a2f35b600080fd5b600080fd5b600080fd5b503461133657600060031936011261133157602060018060a01b0360085416604051908152f35b600080fd5b600080fd5b503461135f57600060031936011261135a576020600d54604051908152f35b600080fd5b600080fd5b5034611700576040806003193601126116fb57600490813591611386836106ac565b60243592611393846106ac565b60018060a01b03916113aa83600854163314611d09565b6113bd6113b8600a5461064e565b61064e565b90845193849263e919ecad60e01b8452838360209586935afa9485156116ee575b6000956116bf575b506113f0856125dd565b966113fa866125dd565b93600086858a600e5493841515806116b4575b60001461163a5750958461144061145b94869461146298999a519485809481936370a0823160e01b835230908301610659565b0392165afa90811561162d575b600091611600575b5061260f565b9387612aec565b61146a611e65565b5b60008861148161147c600a5461064e565b61064e565b915b898982106114d2575050505050505060005b8381106114a25760008551f35b806114cc6114ba6114b56001948a61259f565b6126a1565b6114c4838661259f565b519086612aec565b01611495565b61156661156060019461153287868a8d888261156b9a518096631419245f60e11b82528180611503898883016108f0565b03915afa9485156115f3575b6000956115c2575b5090849151958692839263b34c8caf60e01b84528301610659565b03818d5afa9283156115b5575b60009361157e575b506115569061155b939461259f565b612647565b612654565b87612678565b612699565b611575828961259f565b52018990611483565b61155b9350906115a6611556928d803d106115ae575b61159e81836104ab565b8101906125c9565b935090611547565b503d611594565b6115bd61204d565b61153f565b6115e491929550833d85116115ec575b6115dc81836104ab565b81019061262a565b939038611517565b503d6115d2565b6115fb61204d565b61150f565b6116209150863d8811611626575b61161881836104ab565b8101906125c9565b38611455565b503d61160e565b61163561204d565b61144d565b955091505082949291505180926370a0823160e01b8252818061165f308a8301610659565b03918a165afa9182156116a7575b9161167a575b509061146b565b61169a9150823d84116116a0575b61169281836104ab565b8101906125c9565b38611673565b503d611688565b6116af61204d565b61166d565b50878716151561140d565b6116e0919550833d85116116e7575b6116d881836104ab565b8101906125c9565b93386113e6565b503d6116ce565b6116f661204d565b6113de565b600080fd5b600080fd5b50346117f2576000806003193601126117ef576040519080600180549161172b83610431565b9283865282811690816000146117c55750600114611764575b61176085611754818703826104ab565b60405191829182610500565b0390f35b92508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b8284106117aa5750505090611754816020611760948201019293611744565b8181602092959394955483858901015201910192919061178b565b8695506117609693506020925061175494915060ff191682840152151560051b8201019293611744565b80fd5b600080fd5b503461181b576000600319360112611816576020601154604051908152f35b600080fd5b600080fd5b50602060031936011261199557600480356001806009540361195157600260095560ff601354161560001461185f57826040516316851fc760e11b8152fd5b600d54828101809111611944575b60125410600014611888578260405163d05cb60960e01b8152fd5b601154611893612979565b600e54818101809111611937575b600e556118b7846118b1336128e3565b93612678565b90810180911161192a575b14156000146118db578260405163f7760f2560e01b8152fd5b6118e433612750565b6000905b828210611910575010611904576118fd611e6c565b6000604051f35b63dfb035c9600052601cfd5b809161192361191d6128b7565b3361234d565b01906118e8565b611932612336565b6118c2565b61193f612336565b6118a1565b61194c612336565b61186d565b60648360206040519162461bcd60e51b8352820152600a60248201527f5245454e5452414e4359000000000000000000000000000000000000000000006044820152fd5b600080fd5b5034611a30576040600319360112611a2b576004356119b8816106ac565b60243590811515809203611a26573360005260056020526119dd816040600020611c84565b60ff1981541660ff841617905560405191825260018060a01b0316907f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a36000604051f35b600080fd5b600080fd5b600080fd5b5034611b2e57611a66611a4736610846565b9092611a54838287611e90565b803b15938415611a6d575b868561205a565b6000604051f35b82945060006020949660a4604051809881978296630a85bd0160e11b9c8d855233600486015260018060a01b0380971660248601526044850152608060648501528160848501528484013784838284010152601f80199101168101030193165af1908115611b21575b600091611af3575b5063ffffffff60e01b16148038808080611a5f565b611b14915060203d8111611b1a575b611b0c81836104ab565b810190611fd6565b38611ade565b503d611b02565b611b2961204d565b611ad6565b600080fd5b5034611bfd576020600319360112611bf857600435600d548111600014611b65576004604051635d68437560e11b8152fd5b6040519060808201604052607f820190600a80603092818106840185530491825b611bdf57611bdb611bbe611bcf86886080601f19928381019203018152611bc3604051948592611bb860208501612296565b9061225f565b6126ae565b039081018352826104ab565b60405191829182610500565b0390f35b9080929360001901938181068301855304919082611b86565b600080fd5b600080fd5b5034611c26576000600319360112611c21576020601254604051908152f35b600080fd5b600080fd5b5034611c4f576000600319360112611c4a576020600e54604051908152f35b600080fd5b600080fd5b60018060a01b03166000526005602052604060002090565b60018060a01b03166000526003602052604060002090565b9060018060a01b0316600052602052604060002090565b5034611cf7576040600319360112611cf257602060ff611ce6600435611cc0816106ac565b60243590611ccd826106ac565b60018060a01b0316600052600584526040600020611c84565b54166040519015158152f35b600080fd5b600080fd5b60018060a01b0390541690565b15611d1057565b606460405162461bcd60e51b815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152fd5b15611d5b57565b606460405162461bcd60e51b815260206004820152600a60248201527f4e4f545f4d494e544544000000000000000000000000000000000000000000006044820152fd5b60ff90541690565b15611dae57565b606460405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a45440000000000000000000000000000000000006044820152fd5b9060018060a01b03166bffffffffffffffffffffffff60a01b825416179055565b15611e1a57565b606460405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f524543495049454e540000000000000000000000000000006044820152fd5b6000190190565b6000600e55565b6001600955565b60010190565b6bffffffffffffffffffffffff60a01b8154169055565b9060018060a01b0380611ea28561062e565b541691818416928303611f9257611ee3611f1292821694611ec4861515611e13565b8433148015611f72575b8015611f4c575b611ede90611da7565b611c6c565b611eed8154611e5e565b9055611ef881611c6c565b611f028154611e73565b9055611f0d8561062e565b611df2565b611f23611f1e8461063e565b611e79565b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000604051a4565b50611ede611f69611f64611f5f8a61063e565b611cfc565b61064e565b33149050611ed5565b50611f8d611f8833611f8384611c54565b611c84565b611d9f565b611ece565b606460405162461bcd60e51b815260206004820152600a60248201527f57524f4e475f46524f4d000000000000000000000000000000000000000000006044820152fd5b90816020910312611fee5751611feb81610388565b90565b600080fd5b909160a092600180851b0316825260006020830152604082015260806060820152600060808201520190565b919060a09391600180861b038092168452166020830152604082015260806060820152600060808201520190565b506040513d6000823e3d90fd5b1561206157565b606460405162461bcd60e51b815260206004820152601060248201527f554e534146455f524543495049454e54000000000000000000000000000000006044820152fd5b906120bb60018060a01b03600854163314611d09565b6001918260ff601054161515146000146120e0576004604051639619d74760e01b8152fd5b805167ffffffffffffffff81116121db575b61210681612101600f54610431565b6121e8565b60209384601f8311600114612173575081809161213d9596600093612166575b501b916000199060031b1c191617600f555b612276565b7ff9c7803e94e0d3c02900d8a90893a6d5e90dd04d32a4cfe825520f82bf9f32f66000604051a2565b9092508401519138612126565b601f9291921982169561218461046b565b916000905b8882106121c45750508261213d9697106121ab575b5050811b01600f55612138565b84015160001960f88460031b161c19169055388061219e565b808684958294958a01518155019401920190612189565b6121e3610494565b6120f2565b601f81116121f5575b5050565b600090600f82527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802906020601f850160051c83019410612252575b601f0160051c01915b82811061224657506121f1565b80826001925501612239565b9250601f81939050612230565b90612272602092828151948592016104db565b0190565b61228e906020604051928284809451938492016104db565b810103902090565b90600091600f54906122a782610431565b91600190818116908160001461231c57506001146122c5575b505050565b9091929350600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802906000915b8483106123095750505001903880806122c0565b81816020925485870152019201916122f5565b92949550505060ff191682528015150201903880806122c0565b50634e487b7160e01b600052601160045260246000fd5b9060018060a01b039081831691612365831515611e13565b600090828252600260205260408220541661246657836123876123de95611c6c565b600181540190556123a08161239b8561062e565b611df2565b604051908385847fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8186a43b159384156123e0575b5050505061205a565b565b829394509060209181809481612405630a85bd0160e11b998a83523360048401611ff3565b03925af1918215612459575b9161242b575b5063ffffffff60e01b1614388080806123d5565b61244c915060203d8111612452575b61244481836104ab565b810190611fd6565b38612417565b503d61243a565b61246161204d565b612411565b606460405162461bcd60e51b815260206004820152600e60248201527f414c52454144595f4d494e5445440000000000000000000000000000000000006044820152fd5b906124ca60018060a01b03916124c583600854163314611d09565b6127ac565b6000908251925b8383106124ef575050106124e157565b63dfb035c96000526004601cfd5b9091600c90815480156125915760019260001980920190556000612513838661259f565b51918282527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef826020926002845260409060038b838520541695612558871515611d54565b868552528183209081540190556125766125718761062e565b611e79565b6125876125828761063e565b611e79565b51a40191906124d1565b63ce3a3d376000526004601cfd5b80518210156125b35760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b908160209103126125d8575190565b600080fd5b906125e7826109ed565b6125f460405191826104ab565b8281528092612605601f19916109ed565b0190602036910137565b9190820391821161261d575b565b612625612336565b61261b565b90816020910312612642575161263f816106ac565b90565b600080fd5b9060018060a01b03169052565b606490806000190482118115151661266b575b0290565b612673612336565b612667565b806000190482118115151661268c575b0290565b612694612336565b612688565b612710900490565b60018060a01b0390511690565b6005907f2e6a736f6e00000000000000000000000000000000000000000000000000000081520190565b6126e1816128e3565b60018060a01b0380831633148015612744575b60001461273c57612703612979565b820361272e57600b541680151560001461272657612722923091612a68565b5b5b565b505050612723565b63f7760f256000526004601cfd5b505050612724565b5080600b5416156126f4565b612759816128e3565b60018060a01b03808316331480156127a0575b60001461279857600b54168015156000146127905761278c923091612a68565b5b5b565b50505061278d565b50505061278e565b5080600b54161561276c565b6127b5816128e3565b60018060a01b03808316331480156128ab575b6000146128a357806008541663ffffffff813b16159060009160001461282f57505060005b8203612821576127fe600b5461064e565b908116151560001461281957612815923091612a68565b5b5b565b505050612816565b63f7760f256000526004601cfd5b602060249160405192838092633b7279e960e21b825263044df8e760e41b60048301525afa918215612896575b91612868575b506127ed565b612889915060203d811161288f575b61288181836104ab565b8101906125c9565b38612862565b503d612877565b61289e61204d565b61285c565b505050612817565b5080600b5416156127c8565b6001600c5401600c55600d54600181018091116128d6575b80600d5590565b6128de612336565b6128cf565b60018060a01b039081600b5416918215156000146129705760446020926040519485938492636eb1769f60e11b84521660048301523060248301525afa908115612963575b600091612935575b505b90565b612956915060203d811161295c575b61294e81836104ab565b8101906125c9565b38612930565b503d612944565b61296b61204d565b612928565b50505034612932565b60018060a01b036008541663ffffffff813b1615906000916000146129a057505060005b90565b602060249160405192838092633b7279e960e21b82526340d097c360e01b60048301525afa918215612a07575b916129d9575b5061299d565b6129fa915060203d8111612a00575b6129f281836104ab565b8101906125c9565b386129d3565b503d6129e8565b612a0f61204d565b6129cd565b600080809381935af115612a2457565b606460405162461bcd60e51b815260206004820152601360248201527f4554485f5452414e534645525f4641494c4544000000000000000000000000006044820152fd5b9060006064926020958295604051946323b872dd60e01b86526004860152602485015260448401525af13d15601f3d1160016000511416171615612aa857565b606460405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152fd5b600091826044926020956040519363a9059cbb60e01b8552600485015260248401525af13d15601f3d1160016000511416171615612b2657565b606460405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152fdfea2646970667358221220a902df9920043b69257ae75651f5cf60d9a5d6e2ed1cccee8c78764cffcbc5f264736f6c63430008100033";

type ERC721BasicConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721BasicConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721Basic__factory extends ContractFactory {
  constructor(...args: ERC721BasicConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _baseURI: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    _maxSupply: PromiseOrValue<BigNumberish>,
    _splitter: PromiseOrValue<string>,
    _fraction: PromiseOrValue<BigNumberish>,
    _router: PromiseOrValue<string>,
    _erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC721Basic> {
    return super.deploy(
      _name,
      _symbol,
      _baseURI,
      _price,
      _maxSupply,
      _splitter,
      _fraction,
      _router,
      _erc20,
      overrides || {}
    ) as Promise<ERC721Basic>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _baseURI: PromiseOrValue<string>,
    _price: PromiseOrValue<BigNumberish>,
    _maxSupply: PromiseOrValue<BigNumberish>,
    _splitter: PromiseOrValue<string>,
    _fraction: PromiseOrValue<BigNumberish>,
    _router: PromiseOrValue<string>,
    _erc20: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _baseURI,
      _price,
      _maxSupply,
      _splitter,
      _fraction,
      _router,
      _erc20,
      overrides || {}
    );
  }
  override attach(address: string): ERC721Basic {
    return super.attach(address) as ERC721Basic;
  }
  override connect(signer: Signer): ERC721Basic__factory {
    return super.connect(signer) as ERC721Basic__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721BasicInterface {
    return new utils.Interface(_abi) as ERC721BasicInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721Basic {
    return new Contract(address, _abi, signerOrProvider) as ERC721Basic;
  }
}
