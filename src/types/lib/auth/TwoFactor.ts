/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface TwoFactorInterface extends utils.Interface {
  functions: {
    "getOwner()": FunctionFragment;
    "getRouter()": FunctionFragment;
    "routerHasAuthority()": FunctionFragment;
    "setOwnership(address)": FunctionFragment;
    "setRouterHasAuthority(bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getOwner"
      | "getRouter"
      | "routerHasAuthority"
      | "setOwnership"
      | "setRouterHasAuthority"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRouter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "routerHasAuthority",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouterHasAuthority",
    values: [PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "routerHasAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRouterHasAuthority",
    data: BytesLike
  ): Result;

  events: {
    "OwnerUpdated(address,address)": EventFragment;
    "RouterSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RouterSet"): EventFragment;
}

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface RouterSetEventObject {
  newRouter: string;
}
export type RouterSetEvent = TypedEvent<[string], RouterSetEventObject>;

export type RouterSetEventFilter = TypedEventFilter<RouterSetEvent>;

export interface TwoFactor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TwoFactorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getRouter(overrides?: CallOverrides): Promise<[string]>;

    routerHasAuthority(overrides?: CallOverrides): Promise<[boolean]>;

    setOwnership(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRouterHasAuthority(
      _hasAuthority: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getOwner(overrides?: CallOverrides): Promise<string>;

  getRouter(overrides?: CallOverrides): Promise<string>;

  routerHasAuthority(overrides?: CallOverrides): Promise<boolean>;

  setOwnership(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRouterHasAuthority(
    _hasAuthority: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getOwner(overrides?: CallOverrides): Promise<string>;

    getRouter(overrides?: CallOverrides): Promise<string>;

    routerHasAuthority(overrides?: CallOverrides): Promise<boolean>;

    setOwnership(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouterHasAuthority(
      _hasAuthority: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnerUpdated(address,address)"(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;

    "RouterSet(address)"(
      newRouter?: PromiseOrValue<string> | null
    ): RouterSetEventFilter;
    RouterSet(newRouter?: PromiseOrValue<string> | null): RouterSetEventFilter;
  };

  estimateGas: {
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getRouter(overrides?: CallOverrides): Promise<BigNumber>;

    routerHasAuthority(overrides?: CallOverrides): Promise<BigNumber>;

    setOwnership(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRouterHasAuthority(
      _hasAuthority: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    routerHasAuthority(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setOwnership(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRouterHasAuthority(
      _hasAuthority: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
