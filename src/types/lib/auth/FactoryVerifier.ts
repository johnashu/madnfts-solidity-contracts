/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface FactoryVerifierInterface extends utils.Interface {
  functions: {
    "creatorAuth(address,address)": FunctionFragment;
    "creatorCheck(bytes32)": FunctionFragment;
    "getColID(address)": FunctionFragment;
    "typeChecker(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "creatorAuth"
      | "creatorCheck"
      | "getColID"
      | "typeChecker"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "creatorAuth",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorCheck",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getColID",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "typeChecker",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "creatorAuth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getColID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "typeChecker",
    data: BytesLike
  ): Result;

  events: {};
}

export interface FactoryVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FactoryVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    creatorAuth(
      _token: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { stdout: boolean }>;

    creatorCheck(
      _colID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { creator: string; check: boolean }>;

    getColID(
      _colAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { colID: string }>;

    typeChecker(
      _colID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number] & { pointer: number }>;
  };

  creatorAuth(
    _token: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  creatorCheck(
    _colID: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, boolean] & { creator: string; check: boolean }>;

  getColID(
    _colAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  typeChecker(
    _colID: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    creatorAuth(
      _token: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    creatorCheck(
      _colID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, boolean] & { creator: string; check: boolean }>;

    getColID(
      _colAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    typeChecker(
      _colID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    creatorAuth(
      _token: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creatorCheck(
      _colID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getColID(
      _colAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    typeChecker(
      _colID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    creatorAuth(
      _token: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creatorCheck(
      _colID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getColID(
      _colAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    typeChecker(
      _colID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
