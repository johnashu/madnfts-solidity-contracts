/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface ERC1155WhitelistEventsAndErrorsInterface
  extends utils.Interface {
  functions: {};

  events: {
    "BaseURILocked(string)": EventFragment;
    "BaseURISet(string)": EventFragment;
    "FreeClaimStateSet(bool)": EventFragment;
    "FreeConfigSet(uint256,uint256,bytes32)": EventFragment;
    "PublicMintStateSet(bool)": EventFragment;
    "RoyaltyFeeSet(uint256)": EventFragment;
    "RoyaltyRecipientSet(address)": EventFragment;
    "WhitelistConfigSet(uint256,uint256,bytes32)": EventFragment;
    "WhitelistMintStateSet(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BaseURILocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BaseURISet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FreeClaimStateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FreeConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PublicMintStateSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoyaltyRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistConfigSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistMintStateSet"): EventFragment;
}

export interface BaseURILockedEventObject {
  baseURI: string;
}
export type BaseURILockedEvent = TypedEvent<[string], BaseURILockedEventObject>;

export type BaseURILockedEventFilter = TypedEventFilter<BaseURILockedEvent>;

export interface BaseURISetEventObject {
  newBaseURI: string;
}
export type BaseURISetEvent = TypedEvent<[string], BaseURISetEventObject>;

export type BaseURISetEventFilter = TypedEventFilter<BaseURISetEvent>;

export interface FreeClaimStateSetEventObject {
  freeClaimState: boolean;
}
export type FreeClaimStateSetEvent = TypedEvent<
  [boolean],
  FreeClaimStateSetEventObject
>;

export type FreeClaimStateSetEventFilter =
  TypedEventFilter<FreeClaimStateSetEvent>;

export interface FreeConfigSetEventObject {
  newFreeAmount: BigNumber;
  newMaxFree: BigNumber;
  newMerkleRoot: string;
}
export type FreeConfigSetEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  FreeConfigSetEventObject
>;

export type FreeConfigSetEventFilter = TypedEventFilter<FreeConfigSetEvent>;

export interface PublicMintStateSetEventObject {
  newPublicState: boolean;
}
export type PublicMintStateSetEvent = TypedEvent<
  [boolean],
  PublicMintStateSetEventObject
>;

export type PublicMintStateSetEventFilter =
  TypedEventFilter<PublicMintStateSetEvent>;

export interface RoyaltyFeeSetEventObject {
  newRoyaltyFee: BigNumber;
}
export type RoyaltyFeeSetEvent = TypedEvent<
  [BigNumber],
  RoyaltyFeeSetEventObject
>;

export type RoyaltyFeeSetEventFilter = TypedEventFilter<RoyaltyFeeSetEvent>;

export interface RoyaltyRecipientSetEventObject {
  newRecipient: string;
}
export type RoyaltyRecipientSetEvent = TypedEvent<
  [string],
  RoyaltyRecipientSetEventObject
>;

export type RoyaltyRecipientSetEventFilter =
  TypedEventFilter<RoyaltyRecipientSetEvent>;

export interface WhitelistConfigSetEventObject {
  newWhitelistPrice: BigNumber;
  newMaxWhitelistSupply: BigNumber;
  newMerkleRoot: string;
}
export type WhitelistConfigSetEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  WhitelistConfigSetEventObject
>;

export type WhitelistConfigSetEventFilter =
  TypedEventFilter<WhitelistConfigSetEvent>;

export interface WhitelistMintStateSetEventObject {
  newWhitelistState: boolean;
}
export type WhitelistMintStateSetEvent = TypedEvent<
  [boolean],
  WhitelistMintStateSetEventObject
>;

export type WhitelistMintStateSetEventFilter =
  TypedEventFilter<WhitelistMintStateSetEvent>;

export interface ERC1155WhitelistEventsAndErrors extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC1155WhitelistEventsAndErrorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "BaseURILocked(string)"(
      baseURI?: PromiseOrValue<string> | null
    ): BaseURILockedEventFilter;
    BaseURILocked(
      baseURI?: PromiseOrValue<string> | null
    ): BaseURILockedEventFilter;

    "BaseURISet(string)"(
      newBaseURI?: PromiseOrValue<string> | null
    ): BaseURISetEventFilter;
    BaseURISet(
      newBaseURI?: PromiseOrValue<string> | null
    ): BaseURISetEventFilter;

    "FreeClaimStateSet(bool)"(
      freeClaimState?: PromiseOrValue<boolean> | null
    ): FreeClaimStateSetEventFilter;
    FreeClaimStateSet(
      freeClaimState?: PromiseOrValue<boolean> | null
    ): FreeClaimStateSetEventFilter;

    "FreeConfigSet(uint256,uint256,bytes32)"(
      newFreeAmount?: null,
      newMaxFree?: PromiseOrValue<BigNumberish> | null,
      newMerkleRoot?: PromiseOrValue<BytesLike> | null
    ): FreeConfigSetEventFilter;
    FreeConfigSet(
      newFreeAmount?: null,
      newMaxFree?: PromiseOrValue<BigNumberish> | null,
      newMerkleRoot?: PromiseOrValue<BytesLike> | null
    ): FreeConfigSetEventFilter;

    "PublicMintStateSet(bool)"(
      newPublicState?: PromiseOrValue<boolean> | null
    ): PublicMintStateSetEventFilter;
    PublicMintStateSet(
      newPublicState?: PromiseOrValue<boolean> | null
    ): PublicMintStateSetEventFilter;

    "RoyaltyFeeSet(uint256)"(
      newRoyaltyFee?: PromiseOrValue<BigNumberish> | null
    ): RoyaltyFeeSetEventFilter;
    RoyaltyFeeSet(
      newRoyaltyFee?: PromiseOrValue<BigNumberish> | null
    ): RoyaltyFeeSetEventFilter;

    "RoyaltyRecipientSet(address)"(
      newRecipient?: PromiseOrValue<string> | null
    ): RoyaltyRecipientSetEventFilter;
    RoyaltyRecipientSet(
      newRecipient?: PromiseOrValue<string> | null
    ): RoyaltyRecipientSetEventFilter;

    "WhitelistConfigSet(uint256,uint256,bytes32)"(
      newWhitelistPrice?: PromiseOrValue<BigNumberish> | null,
      newMaxWhitelistSupply?: PromiseOrValue<BigNumberish> | null,
      newMerkleRoot?: PromiseOrValue<BytesLike> | null
    ): WhitelistConfigSetEventFilter;
    WhitelistConfigSet(
      newWhitelistPrice?: PromiseOrValue<BigNumberish> | null,
      newMaxWhitelistSupply?: PromiseOrValue<BigNumberish> | null,
      newMerkleRoot?: PromiseOrValue<BytesLike> | null
    ): WhitelistConfigSetEventFilter;

    "WhitelistMintStateSet(bool)"(
      newWhitelistState?: PromiseOrValue<boolean> | null
    ): WhitelistMintStateSetEventFilter;
    WhitelistMintStateSet(
      newWhitelistState?: PromiseOrValue<boolean> | null
    ): WhitelistMintStateSetEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
