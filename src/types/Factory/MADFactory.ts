/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";

export declare namespace ContractTypes {
  export type CreateCollectionParamsStruct = {
    tokenType: BigNumberish;
    tokenSalt: BytesLike;
    collectionName: string;
    collectionSymbol: string;
    price: BigNumberish;
    maxSupply: BigNumberish;
    uri: string;
    splitter: AddressLike;
    royalty: BigNumberish;
  };

  export type CreateCollectionParamsStructOutput = [
    tokenType: bigint,
    tokenSalt: string,
    collectionName: string,
    collectionSymbol: string,
    price: bigint,
    maxSupply: bigint,
    uri: string,
    splitter: string,
    royalty: bigint
  ] & {
    tokenType: bigint;
    tokenSalt: string;
    collectionName: string;
    collectionSymbol: string;
    price: bigint;
    maxSupply: bigint;
    uri: string;
    splitter: string;
    royalty: bigint;
  };

  export type CreateSplitterParamsStruct = {
    splitterSalt: BytesLike;
    ambassador: AddressLike;
    project: AddressLike;
    ambassadorShare: BigNumberish;
    projectShare: BigNumberish;
  };

  export type CreateSplitterParamsStructOutput = [
    splitterSalt: string,
    ambassador: string,
    project: string,
    ambassadorShare: bigint,
    projectShare: bigint
  ] & {
    splitterSalt: string;
    ambassador: string;
    project: string;
    ambassadorShare: bigint;
    projectShare: bigint;
  };
}

export interface MADFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADDRESS_ZERO"
      | "addCollectionType"
      | "collectionInfo"
      | "collectionTypes"
      | "createCollection"
      | "createSplitter"
      | "creatorAuth"
      | "creatorCheck"
      | "erc20"
      | "feeCreateCollection"
      | "feeCreateCollectionErc20"
      | "feeCreateSplitter"
      | "feeCreateSplitterErc20"
      | "getDeployedAddress"
      | "getIDsLength"
      | "name"
      | "owner"
      | "recipient"
      | "router"
      | "setFees(uint256,uint256)"
      | "setFees(uint256,uint256,address)"
      | "setOwner"
      | "setRecipient"
      | "setRouter"
      | "splitterInfo"
      | "userTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CollectionCreated"
      | "CollectionTypeAdded"
      | "FeesUpdated"
      | "MarketplaceUpdated"
      | "OwnerUpdated"
      | "PaymentTokenUpdated"
      | "RecipientUpdated"
      | "RouterUpdated"
      | "SplitterCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADDRESS_ZERO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCollectionType",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionTypes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [ContractTypes.CreateCollectionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createSplitter",
    values: [ContractTypes.CreateSplitterParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorAuth",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorCheck",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "erc20", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeCreateCollection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCreateCollectionErc20",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCreateSplitter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCreateSplitterErc20",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedAddress",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIDsLength",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "recipient", values?: undefined): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFees(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees(uint256,uint256,address)",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "splitterInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTokens",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESS_ZERO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollectionType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionTypes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSplitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorAuth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCreateCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCreateCollectionErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCreateSplitter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCreateSplitterErc20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIDsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipient", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFees(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFees(uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "splitterInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userTokens", data: BytesLike): Result;
}

export namespace CollectionCreatedEvent {
  export type InputTuple = [
    newSplitter: AddressLike,
    newCollection: AddressLike,
    collectionName: string,
    collectionSymbol: string,
    royalties: BigNumberish,
    maxSupply: BigNumberish,
    mintPrice: BigNumberish,
    tokenType: BigNumberish
  ];
  export type OutputTuple = [
    newSplitter: string,
    newCollection: string,
    collectionName: string,
    collectionSymbol: string,
    royalties: bigint,
    maxSupply: bigint,
    mintPrice: bigint,
    tokenType: bigint
  ];
  export interface OutputObject {
    newSplitter: string;
    newCollection: string;
    collectionName: string;
    collectionSymbol: string;
    royalties: bigint;
    maxSupply: bigint;
    mintPrice: bigint;
    tokenType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectionTypeAddedEvent {
  export type InputTuple = [index: BigNumberish];
  export type OutputTuple = [index: bigint];
  export interface OutputObject {
    index: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeesUpdatedEvent {
  export type InputTuple = [feeVal2: BigNumberish, feeVal3: BigNumberish];
  export type OutputTuple = [feeVal2: bigint, feeVal3: bigint];
  export interface OutputObject {
    feeVal2: bigint;
    feeVal3: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketplaceUpdatedEvent {
  export type InputTuple = [newMarket: AddressLike];
  export type OutputTuple = [newMarket: string];
  export interface OutputObject {
    newMarket: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerUpdatedEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentTokenUpdatedEvent {
  export type InputTuple = [newPaymentToken: AddressLike];
  export type OutputTuple = [newPaymentToken: string];
  export interface OutputObject {
    newPaymentToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecipientUpdatedEvent {
  export type InputTuple = [newRecipient: AddressLike];
  export type OutputTuple = [newRecipient: string];
  export interface OutputObject {
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RouterUpdatedEvent {
  export type InputTuple = [newRouter: AddressLike];
  export type OutputTuple = [newRouter: string];
  export interface OutputObject {
    newRouter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SplitterCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    shares: BigNumberish[],
    payees: AddressLike[],
    splitter: AddressLike,
    flag: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    shares: bigint[],
    payees: string[],
    splitter: string,
    flag: bigint
  ];
  export interface OutputObject {
    creator: string;
    shares: bigint[];
    payees: string[];
    splitter: string;
    flag: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MADFactory extends BaseContract {
  connect(runner?: ContractRunner | null): MADFactory;
  waitForDeployment(): Promise<this>;

  interface: MADFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADDRESS_ZERO: TypedContractMethod<[], [string], "view">;

  addCollectionType: TypedContractMethod<
    [index: BigNumberish, impl: BytesLike],
    [void],
    "nonpayable"
  >;

  collectionInfo: TypedContractMethod<
    [collectionId: AddressLike],
    [
      [string, bigint, string, bigint, string] & {
        creator: string;
        collectionType: bigint;
        collectionSalt: string;
        blocknumber: bigint;
        splitter: string;
      }
    ],
    "view"
  >;

  collectionTypes: TypedContractMethod<
    [collectionIndex: BigNumberish],
    [string],
    "view"
  >;

  createCollection: TypedContractMethod<
    [params: ContractTypes.CreateCollectionParamsStruct],
    [void],
    "payable"
  >;

  createSplitter: TypedContractMethod<
    [params: ContractTypes.CreateSplitterParamsStruct],
    [void],
    "payable"
  >;

  creatorAuth: TypedContractMethod<
    [_token: AddressLike, _user: AddressLike],
    [boolean],
    "view"
  >;

  creatorCheck: TypedContractMethod<
    [_collectionId: AddressLike, _creator: AddressLike],
    [boolean],
    "view"
  >;

  erc20: TypedContractMethod<[], [string], "view">;

  feeCreateCollection: TypedContractMethod<[], [bigint], "view">;

  feeCreateCollectionErc20: TypedContractMethod<
    [erc20token: AddressLike],
    [[bigint, boolean] & { feeAmount: bigint; isValid: boolean }],
    "view"
  >;

  feeCreateSplitter: TypedContractMethod<[], [bigint], "view">;

  feeCreateSplitterErc20: TypedContractMethod<
    [erc20token: AddressLike],
    [[bigint, boolean] & { feeAmount: bigint; isValid: boolean }],
    "view"
  >;

  getDeployedAddress: TypedContractMethod<
    [_salt: BytesLike, _addr: AddressLike],
    [string],
    "view"
  >;

  getIDsLength: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  recipient: TypedContractMethod<[], [string], "view">;

  router: TypedContractMethod<[], [string], "view">;

  "setFees(uint256,uint256)": TypedContractMethod<
    [_feeCreateCollection: BigNumberish, _feeCreateSplitter: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setFees(uint256,uint256,address)": TypedContractMethod<
    [
      _feeCreateCollection: BigNumberish,
      _feeCreateSplitter: BigNumberish,
      erc20token: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  setOwner: TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  setRecipient: TypedContractMethod<
    [_recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setRouter: TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;

  splitterInfo: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [string, string, string, string, bigint, bigint, boolean] & {
        splitter: string;
        splitterSalt: string;
        ambassador: string;
        project: string;
        ambassadorShare: bigint;
        projectShare: bigint;
        valid: boolean;
      }
    ],
    "view"
  >;

  userTokens: TypedContractMethod<
    [collectionOwner: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADDRESS_ZERO"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addCollectionType"
  ): TypedContractMethod<
    [index: BigNumberish, impl: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectionInfo"
  ): TypedContractMethod<
    [collectionId: AddressLike],
    [
      [string, bigint, string, bigint, string] & {
        creator: string;
        collectionType: bigint;
        collectionSalt: string;
        blocknumber: bigint;
        splitter: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "collectionTypes"
  ): TypedContractMethod<[collectionIndex: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createCollection"
  ): TypedContractMethod<
    [params: ContractTypes.CreateCollectionParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createSplitter"
  ): TypedContractMethod<
    [params: ContractTypes.CreateSplitterParamsStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "creatorAuth"
  ): TypedContractMethod<
    [_token: AddressLike, _user: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "creatorCheck"
  ): TypedContractMethod<
    [_collectionId: AddressLike, _creator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "erc20"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "feeCreateCollection"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeCreateCollectionErc20"
  ): TypedContractMethod<
    [erc20token: AddressLike],
    [[bigint, boolean] & { feeAmount: bigint; isValid: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "feeCreateSplitter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeCreateSplitterErc20"
  ): TypedContractMethod<
    [erc20token: AddressLike],
    [[bigint, boolean] & { feeAmount: bigint; isValid: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDeployedAddress"
  ): TypedContractMethod<
    [_salt: BytesLike, _addr: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIDsLength"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setFees(uint256,uint256)"
  ): TypedContractMethod<
    [_feeCreateCollection: BigNumberish, _feeCreateSplitter: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFees(uint256,uint256,address)"
  ): TypedContractMethod<
    [
      _feeCreateCollection: BigNumberish,
      _feeCreateSplitter: BigNumberish,
      erc20token: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOwner"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRecipient"
  ): TypedContractMethod<[_recipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRouter"
  ): TypedContractMethod<[_router: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "splitterInfo"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [
      [string, string, string, string, bigint, bigint, boolean] & {
        splitter: string;
        splitterSalt: string;
        ambassador: string;
        project: string;
        ambassadorShare: bigint;
        projectShare: bigint;
        valid: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTokens"
  ): TypedContractMethod<
    [collectionOwner: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "CollectionCreated"
  ): TypedContractEvent<
    CollectionCreatedEvent.InputTuple,
    CollectionCreatedEvent.OutputTuple,
    CollectionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CollectionTypeAdded"
  ): TypedContractEvent<
    CollectionTypeAddedEvent.InputTuple,
    CollectionTypeAddedEvent.OutputTuple,
    CollectionTypeAddedEvent.OutputObject
  >;
  getEvent(
    key: "FeesUpdated"
  ): TypedContractEvent<
    FeesUpdatedEvent.InputTuple,
    FeesUpdatedEvent.OutputTuple,
    FeesUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MarketplaceUpdated"
  ): TypedContractEvent<
    MarketplaceUpdatedEvent.InputTuple,
    MarketplaceUpdatedEvent.OutputTuple,
    MarketplaceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerUpdated"
  ): TypedContractEvent<
    OwnerUpdatedEvent.InputTuple,
    OwnerUpdatedEvent.OutputTuple,
    OwnerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentTokenUpdated"
  ): TypedContractEvent<
    PaymentTokenUpdatedEvent.InputTuple,
    PaymentTokenUpdatedEvent.OutputTuple,
    PaymentTokenUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RecipientUpdated"
  ): TypedContractEvent<
    RecipientUpdatedEvent.InputTuple,
    RecipientUpdatedEvent.OutputTuple,
    RecipientUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RouterUpdated"
  ): TypedContractEvent<
    RouterUpdatedEvent.InputTuple,
    RouterUpdatedEvent.OutputTuple,
    RouterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SplitterCreated"
  ): TypedContractEvent<
    SplitterCreatedEvent.InputTuple,
    SplitterCreatedEvent.OutputTuple,
    SplitterCreatedEvent.OutputObject
  >;

  filters: {
    "CollectionCreated(address,address,string,string,uint256,uint256,uint256,uint8)": TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;
    CollectionCreated: TypedContractEvent<
      CollectionCreatedEvent.InputTuple,
      CollectionCreatedEvent.OutputTuple,
      CollectionCreatedEvent.OutputObject
    >;

    "CollectionTypeAdded(uint256)": TypedContractEvent<
      CollectionTypeAddedEvent.InputTuple,
      CollectionTypeAddedEvent.OutputTuple,
      CollectionTypeAddedEvent.OutputObject
    >;
    CollectionTypeAdded: TypedContractEvent<
      CollectionTypeAddedEvent.InputTuple,
      CollectionTypeAddedEvent.OutputTuple,
      CollectionTypeAddedEvent.OutputObject
    >;

    "FeesUpdated(uint256,uint256)": TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;
    FeesUpdated: TypedContractEvent<
      FeesUpdatedEvent.InputTuple,
      FeesUpdatedEvent.OutputTuple,
      FeesUpdatedEvent.OutputObject
    >;

    "MarketplaceUpdated(address)": TypedContractEvent<
      MarketplaceUpdatedEvent.InputTuple,
      MarketplaceUpdatedEvent.OutputTuple,
      MarketplaceUpdatedEvent.OutputObject
    >;
    MarketplaceUpdated: TypedContractEvent<
      MarketplaceUpdatedEvent.InputTuple,
      MarketplaceUpdatedEvent.OutputTuple,
      MarketplaceUpdatedEvent.OutputObject
    >;

    "OwnerUpdated(address,address)": TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;
    OwnerUpdated: TypedContractEvent<
      OwnerUpdatedEvent.InputTuple,
      OwnerUpdatedEvent.OutputTuple,
      OwnerUpdatedEvent.OutputObject
    >;

    "PaymentTokenUpdated(address)": TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;
    PaymentTokenUpdated: TypedContractEvent<
      PaymentTokenUpdatedEvent.InputTuple,
      PaymentTokenUpdatedEvent.OutputTuple,
      PaymentTokenUpdatedEvent.OutputObject
    >;

    "RecipientUpdated(address)": TypedContractEvent<
      RecipientUpdatedEvent.InputTuple,
      RecipientUpdatedEvent.OutputTuple,
      RecipientUpdatedEvent.OutputObject
    >;
    RecipientUpdated: TypedContractEvent<
      RecipientUpdatedEvent.InputTuple,
      RecipientUpdatedEvent.OutputTuple,
      RecipientUpdatedEvent.OutputObject
    >;

    "RouterUpdated(address)": TypedContractEvent<
      RouterUpdatedEvent.InputTuple,
      RouterUpdatedEvent.OutputTuple,
      RouterUpdatedEvent.OutputObject
    >;
    RouterUpdated: TypedContractEvent<
      RouterUpdatedEvent.InputTuple,
      RouterUpdatedEvent.OutputTuple,
      RouterUpdatedEvent.OutputObject
    >;

    "SplitterCreated(address,uint256[],address[],address,uint256)": TypedContractEvent<
      SplitterCreatedEvent.InputTuple,
      SplitterCreatedEvent.OutputTuple,
      SplitterCreatedEvent.OutputObject
    >;
    SplitterCreated: TypedContractEvent<
      SplitterCreatedEvent.InputTuple,
      SplitterCreatedEvent.OutputTuple,
      SplitterCreatedEvent.OutputObject
    >;
  };
}
